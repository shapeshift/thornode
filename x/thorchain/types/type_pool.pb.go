// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/types/type_pool.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// |    State    | Swap | Add   | Withdraw  | Refunding |
// | ----------- | ---- | ----- | --------- | --------- |
// | `staged`    | no   | yes   | yes       | Refund Invalid Add/Remove Liquidity && all Swaps |
// | `available` | yes  | yes   | yes       | Refund Invalid Tx |
// | `suspended` | no   | no    | no        | Refund all |
type PoolStatus int32

const (
	PoolStatus_Available PoolStatus = 0
	PoolStatus_Staged    PoolStatus = 1
	PoolStatus_Suspended PoolStatus = 2
)

var PoolStatus_name = map[int32]string{
	0: "Available",
	1: "Staged",
	2: "Suspended",
}

var PoolStatus_value = map[string]int32{
	"Available": 0,
	"Staged":    1,
	"Suspended": 2,
}

func (x PoolStatus) String() string {
	return proto.EnumName(PoolStatus_name, int32(x))
}

func (PoolStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_90e6f303297a9bb4, []int{0}
}

type Pool struct {
	BalanceRune  github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=balance_rune,json=balanceRune,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"balance_rune"`
	BalanceAsset github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,2,opt,name=balance_asset,json=balanceAsset,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"balance_asset"`
	Asset        common.Asset                            `protobuf:"bytes,3,opt,name=asset,proto3" json:"asset"`
	PoolUnits    github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=pool_units,json=poolUnits,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"pool_units"`
	Status       PoolStatus                              `protobuf:"varint,5,opt,name=status,proto3,enum=types.PoolStatus" json:"status,omitempty"`
}

func (m *Pool) Reset()      { *m = Pool{} }
func (*Pool) ProtoMessage() {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_90e6f303297a9bb4, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("types.PoolStatus", PoolStatus_name, PoolStatus_value)
	proto.RegisterType((*Pool)(nil), "types.Pool")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/types/type_pool.proto", fileDescriptor_90e6f303297a9bb4)
}

var fileDescriptor_90e6f303297a9bb4 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xb1, 0xce, 0xda, 0x30,
	0x10, 0xc7, 0x6d, 0x0a, 0x48, 0x98, 0x52, 0x51, 0xab, 0x43, 0xc4, 0x60, 0xa2, 0x2e, 0x85, 0x4a,
	0x4d, 0x54, 0x2a, 0x75, 0x87, 0x07, 0xa8, 0xaa, 0x50, 0x96, 0x2e, 0xc8, 0x49, 0xac, 0x24, 0x6a,
	0xe2, 0x8b, 0x62, 0x07, 0xb5, 0x5b, 0x1f, 0xa1, 0x8f, 0xc5, 0xc8, 0x54, 0xa1, 0x0e, 0xa8, 0x84,
	0x17, 0xf9, 0xe4, 0x24, 0x88, 0xef, 0xd3, 0xb7, 0xb1, 0xf8, 0xce, 0x77, 0x7f, 0xff, 0x7c, 0x3e,
	0x1f, 0x71, 0x74, 0x0c, 0x45, 0x10, 0xf3, 0x44, 0xba, 0xbb, 0x8f, 0xee, 0x4f, 0xf7, 0xb6, 0xd5,
	0xbf, 0x72, 0xa1, 0xea, 0x75, 0x9b, 0x03, 0xa4, 0x4e, 0x5e, 0x80, 0x06, 0xda, 0xab, 0xc3, 0x13,
	0xfb, 0xc9, 0xb1, 0x00, 0xb2, 0x0c, 0x64, 0x6b, 0x1a, 0xe1, 0xe4, 0x4d, 0x04, 0x11, 0xd4, 0xae,
	0x6b, 0xbc, 0x26, 0xfa, 0xf6, 0x6f, 0x87, 0x74, 0xbf, 0x02, 0xa4, 0xd4, 0x23, 0x2f, 0x7d, 0x9e,
	0x72, 0x19, 0x88, 0x6d, 0x51, 0x4a, 0x61, 0x61, 0x1b, 0xcf, 0x06, 0x2b, 0x77, 0x7f, 0x9a, 0xa2,
	0x7f, 0xa7, 0xe9, 0xbb, 0x28, 0xd1, 0x71, 0xe9, 0x3b, 0x01, 0x64, 0x6e, 0x00, 0x2a, 0x03, 0xd5,
	0x9a, 0x0f, 0x2a, 0xfc, 0xd1, 0x54, 0xe6, 0x6c, 0x12, 0xa9, 0xbd, 0x61, 0x0b, 0xf1, 0x4a, 0x29,
	0xe8, 0x37, 0x32, 0xba, 0x32, 0xb9, 0x52, 0x42, 0x5b, 0x9d, 0xfb, 0xa0, 0xd7, 0xca, 0x96, 0x06,
	0x42, 0xe7, 0xa4, 0xd7, 0xd0, 0x5e, 0xd8, 0x78, 0x36, 0x5c, 0x8c, 0x9c, 0xf6, 0x99, 0x75, 0x76,
	0xd5, 0x35, 0x70, 0xaf, 0x51, 0xd0, 0x2f, 0x84, 0x98, 0x56, 0x6d, 0x4b, 0x99, 0x68, 0x65, 0x75,
	0xef, 0xbb, 0x7d, 0x60, 0x10, 0x1b, 0x43, 0xa0, 0x73, 0xd2, 0x57, 0x9a, 0xeb, 0x52, 0x59, 0x3d,
	0x1b, 0xcf, 0x5e, 0x2d, 0x5e, 0x3b, 0x8d, 0xce, 0x74, 0x70, 0x5d, 0x27, 0xbc, 0x56, 0xf0, 0xfe,
	0x33, 0x21, 0xb7, 0x28, 0x1d, 0x91, 0xc1, 0x72, 0xc7, 0x93, 0x94, 0xfb, 0xa9, 0x18, 0x23, 0x4a,
	0x48, 0x7f, 0xad, 0x79, 0x24, 0xc2, 0x31, 0x36, 0xa9, 0x75, 0xa9, 0x72, 0x21, 0x43, 0x11, 0x8e,
	0x3b, 0xab, 0xcd, 0xfe, 0xcc, 0xd0, 0xf1, 0xcc, 0xd0, 0xef, 0x8a, 0xa1, 0x7d, 0xc5, 0xf0, 0xa1,
	0x62, 0xf8, 0x7f, 0xc5, 0xf0, 0x9f, 0x0b, 0x43, 0x87, 0x0b, 0x43, 0xc7, 0x0b, 0x43, 0xdf, 0xdd,
	0x28, 0xd1, 0x29, 0x6f, 0x8a, 0x7f, 0x34, 0x21, 0x31, 0x14, 0x12, 0x42, 0xf1, 0x7c, 0x6c, 0xfc,
	0x7e, 0xfd, 0xdd, 0x9f, 0x1e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x19, 0xd3, 0x0b, 0xae, 0x5f, 0x02,
	0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypePool(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.PoolUnits.Size()
		i -= size
		if _, err := m.PoolUnits.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BalanceAsset.Size()
		i -= size
		if _, err := m.BalanceAsset.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.BalanceRune.Size()
		i -= size
		if _, err := m.BalanceRune.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypePool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypePool(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypePool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BalanceRune.Size()
	n += 1 + l + sovTypePool(uint64(l))
	l = m.BalanceAsset.Size()
	n += 1 + l + sovTypePool(uint64(l))
	l = m.Asset.Size()
	n += 1 + l + sovTypePool(uint64(l))
	l = m.PoolUnits.Size()
	n += 1 + l + sovTypePool(uint64(l))
	if m.Status != 0 {
		n += 1 + sovTypePool(uint64(m.Status))
	}
	return n
}

func sovTypePool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypePool(x uint64) (n int) {
	return sovTypePool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypePool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceRune", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceRune.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolUnits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypePool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypePool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolUnits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PoolStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypePool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypePool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypePool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypePool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypePool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypePool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypePool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypePool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypePool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypePool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypePool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypePool = fmt.Errorf("proto: unexpected end of group")
)
