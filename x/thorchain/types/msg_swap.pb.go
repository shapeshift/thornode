// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/types/msg_swap.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "gitlab.com/thorchain/thornode/common"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderType int32

const (
	OrderType_market OrderType = 0
	OrderType_limit  OrderType = 1
)

var OrderType_name = map[int32]string{
	0: "market",
	1: "limit",
}

var OrderType_value = map[string]int32{
	"market": 0,
	"limit":  1,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}

func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4f30a110e5a3af89, []int{0}
}

type MsgSwap struct {
	Tx                      common.Tx                                     `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	TargetAsset             common.Asset                                  `protobuf:"bytes,2,opt,name=target_asset,json=targetAsset,proto3" json:"target_asset"`
	Destination             gitlab_com_thorchain_thornode_common.Address  `protobuf:"bytes,3,opt,name=destination,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"destination,omitempty"`
	TradeTarget             github_com_cosmos_cosmos_sdk_types.Uint       `protobuf:"bytes,4,opt,name=trade_target,json=tradeTarget,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"trade_target"`
	AffiliateAddress        gitlab_com_thorchain_thornode_common.Address  `protobuf:"bytes,5,opt,name=affiliate_address,json=affiliateAddress,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"affiliate_address,omitempty"`
	AffiliateBasisPoints    github_com_cosmos_cosmos_sdk_types.Uint       `protobuf:"bytes,6,opt,name=affiliate_basis_points,json=affiliateBasisPoints,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"affiliate_basis_points"`
	Signer                  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
	Aggregator              string                                        `protobuf:"bytes,8,opt,name=aggregator,proto3" json:"aggregator,omitempty"`
	AggregatorTargetAddress string                                        `protobuf:"bytes,9,opt,name=aggregator_target_address,json=aggregatorTargetAddress,proto3" json:"aggregator_target_address,omitempty"`
	AggregatorTargetLimit   *github_com_cosmos_cosmos_sdk_types.Uint      `protobuf:"bytes,10,opt,name=aggregator_target_limit,json=aggregatorTargetLimit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"aggregator_target_limit,omitempty"`
	OrderType               OrderType                                     `protobuf:"varint,11,opt,name=order_type,json=orderType,proto3,enum=types.OrderType" json:"order_type,omitempty"`
}

func (m *MsgSwap) Reset()         { *m = MsgSwap{} }
func (m *MsgSwap) String() string { return proto.CompactTextString(m) }
func (*MsgSwap) ProtoMessage()    {}
func (*MsgSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f30a110e5a3af89, []int{0}
}
func (m *MsgSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwap.Merge(m, src)
}
func (m *MsgSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwap proto.InternalMessageInfo

func (m *MsgSwap) GetTx() common.Tx {
	if m != nil {
		return m.Tx
	}
	return common.Tx{}
}

func (m *MsgSwap) GetTargetAsset() common.Asset {
	if m != nil {
		return m.TargetAsset
	}
	return common.Asset{}
}

func (m *MsgSwap) GetDestination() gitlab_com_thorchain_thornode_common.Address {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *MsgSwap) GetAffiliateAddress() gitlab_com_thorchain_thornode_common.Address {
	if m != nil {
		return m.AffiliateAddress
	}
	return ""
}

func (m *MsgSwap) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *MsgSwap) GetAggregator() string {
	if m != nil {
		return m.Aggregator
	}
	return ""
}

func (m *MsgSwap) GetAggregatorTargetAddress() string {
	if m != nil {
		return m.AggregatorTargetAddress
	}
	return ""
}

func (m *MsgSwap) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_market
}

func init() {
	proto.RegisterEnum("types.OrderType", OrderType_name, OrderType_value)
	proto.RegisterType((*MsgSwap)(nil), "types.MsgSwap")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/types/msg_swap.proto", fileDescriptor_4f30a110e5a3af89)
}

var fileDescriptor_4f30a110e5a3af89 = []byte{
	// 507 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0xb2, 0x76, 0xf4, 0xb5, 0xa0, 0x62, 0x0d, 0x66, 0x76, 0x48, 0xa3, 0x5d, 0xa8,
	0x10, 0x6d, 0xd8, 0x90, 0x38, 0x70, 0x6b, 0x6e, 0x93, 0x40, 0xa0, 0x50, 0x2e, 0x48, 0x28, 0x72,
	0x13, 0xcf, 0xb5, 0xd6, 0xc4, 0x91, 0x6d, 0x58, 0xf7, 0x2d, 0x10, 0x9f, 0x6a, 0xc7, 0x1d, 0x11,
	0x87, 0x0a, 0xb5, 0xdf, 0x62, 0x27, 0x14, 0x27, 0x69, 0x0b, 0x93, 0x10, 0xec, 0x14, 0xfb, 0x9f,
	0xff, 0xfb, 0xbd, 0xe7, 0xbf, 0x6c, 0x18, 0x98, 0xa9, 0x54, 0xd1, 0x94, 0x8a, 0xd4, 0xfb, 0x72,
	0xe4, 0xcd, 0xbd, 0xcd, 0xd6, 0x5c, 0x64, 0x4c, 0x7b, 0x89, 0xe6, 0xa1, 0x3e, 0xa7, 0xd9, 0x30,
	0x53, 0xd2, 0x48, 0xdc, 0xb0, 0xea, 0x81, 0xfb, 0x5b, 0x55, 0x24, 0x93, 0x44, 0xa6, 0xe5, 0xa7,
	0x30, 0x1e, 0xec, 0x71, 0xc9, 0xa5, 0x5d, 0x7a, 0xf9, 0xaa, 0x50, 0x0f, 0xbf, 0x35, 0x61, 0xf7,
	0x8d, 0xe6, 0xef, 0xcf, 0x69, 0x86, 0x5d, 0xa8, 0x9b, 0x39, 0x41, 0x2e, 0xea, 0xb7, 0x8f, 0x61,
	0x58, 0x16, 0x8f, 0xe7, 0xfe, 0xce, 0xe5, 0xa2, 0x57, 0x0b, 0xea, 0x66, 0x8e, 0x5f, 0x42, 0xc7,
	0x50, 0xc5, 0x99, 0x09, 0xa9, 0xd6, 0xcc, 0x90, 0xba, 0xf5, 0xde, 0xab, 0xbc, 0xa3, 0x5c, 0x2c,
	0xed, 0xed, 0xc2, 0x68, 0x25, 0x1c, 0x40, 0x3b, 0x66, 0xda, 0x88, 0x94, 0x1a, 0x21, 0x53, 0x72,
	0xc7, 0x45, 0xfd, 0x96, 0xff, 0xfc, 0x7a, 0xd1, 0x7b, 0xc6, 0x85, 0x99, 0xd1, 0x49, 0x0e, 0xd8,
	0x3e, 0xe8, 0x54, 0xaa, 0x54, 0xc6, 0xac, 0x3a, 0xc0, 0x28, 0x8e, 0x15, 0xd3, 0x3a, 0xd8, 0x86,
	0xe0, 0x00, 0x3a, 0x46, 0xd1, 0x98, 0x85, 0x45, 0x23, 0xb2, 0x63, 0xa1, 0x5e, 0xde, 0xfc, 0xc7,
	0xa2, 0xf7, 0x84, 0x0b, 0x33, 0xfd, 0x5c, 0x80, 0x23, 0xa9, 0x13, 0xa9, 0xcb, 0xcf, 0x40, 0xc7,
	0x67, 0x45, 0x92, 0xc3, 0x0f, 0x22, 0x35, 0x41, 0xdb, 0x42, 0xc6, 0x96, 0x81, 0x3f, 0xc1, 0x03,
	0x7a, 0x7a, 0x2a, 0x66, 0x82, 0x1a, 0x16, 0xd2, 0xa2, 0x2b, 0x69, 0xdc, 0x72, 0xda, 0xee, 0x1a,
	0x55, 0x2a, 0x98, 0xc1, 0xa3, 0x0d, 0x7e, 0x42, 0xb5, 0xd0, 0x61, 0x26, 0x45, 0x6a, 0x34, 0x69,
	0xde, 0x6e, 0xf8, 0xbd, 0x35, 0xce, 0xcf, 0x69, 0xef, 0x2c, 0x0c, 0x9f, 0x40, 0x53, 0x0b, 0x9e,
	0x32, 0x45, 0x76, 0x5d, 0xd4, 0xef, 0xf8, 0x47, 0xd7, 0x8b, 0xde, 0xe0, 0x1f, 0x90, 0xa3, 0x28,
	0xaa, 0x66, 0x2f, 0x01, 0xd8, 0x01, 0xa0, 0x9c, 0x2b, 0xc6, 0xa9, 0x91, 0x8a, 0xdc, 0xcd, 0xa7,
	0x0c, 0xb6, 0x14, 0xfc, 0x0a, 0x1e, 0x6f, 0x76, 0x61, 0x75, 0x37, 0xca, 0xe0, 0x5a, 0xd6, 0xbe,
	0xbf, 0x31, 0x14, 0x29, 0x57, 0x69, 0x70, 0xd8, 0xbf, 0x59, 0x3b, 0x13, 0x89, 0x30, 0x04, 0xd6,
	0x71, 0xa0, 0xff, 0x89, 0xe3, 0xe1, 0x9f, 0xad, 0x5e, 0xe7, 0x34, 0xec, 0x01, 0x48, 0x15, 0x33,
	0x15, 0xe6, 0x56, 0xd2, 0x76, 0x51, 0xff, 0xfe, 0x71, 0x77, 0x58, 0xd4, 0xbd, 0xcd, 0x7f, 0x8c,
	0x2f, 0x32, 0x16, 0xb4, 0x64, 0xb5, 0x7c, 0x7a, 0x08, 0xad, 0xb5, 0x8e, 0x01, 0x9a, 0x09, 0x55,
	0x67, 0xcc, 0x74, 0x6b, 0xb8, 0x05, 0x0d, 0x3b, 0x60, 0x17, 0xf9, 0x27, 0x97, 0x4b, 0x07, 0x5d,
	0x2d, 0x1d, 0xf4, 0x73, 0xe9, 0xa0, 0xaf, 0x2b, 0xa7, 0x76, 0xb5, 0x72, 0x6a, 0xdf, 0x57, 0x4e,
	0xed, 0xa3, 0xf7, 0xf7, 0x5b, 0x72, 0xe3, 0x45, 0x4f, 0x9a, 0xf6, 0x29, 0xbe, 0xf8, 0x15, 0x00,
	0x00, 0xff, 0xff, 0xe7, 0x5a, 0xe0, 0xee, 0xfa, 0x03, 0x00, 0x00,
}

func (m *MsgSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderType != 0 {
		i = encodeVarintMsgSwap(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x58
	}
	if m.AggregatorTargetLimit != nil {
		{
			size := m.AggregatorTargetLimit.Size()
			i -= size
			if _, err := m.AggregatorTargetLimit.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintMsgSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.AggregatorTargetAddress) > 0 {
		i -= len(m.AggregatorTargetAddress)
		copy(dAtA[i:], m.AggregatorTargetAddress)
		i = encodeVarintMsgSwap(dAtA, i, uint64(len(m.AggregatorTargetAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Aggregator) > 0 {
		i -= len(m.Aggregator)
		copy(dAtA[i:], m.Aggregator)
		i = encodeVarintMsgSwap(dAtA, i, uint64(len(m.Aggregator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsgSwap(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.AffiliateBasisPoints.Size()
		i -= size
		if _, err := m.AffiliateBasisPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.AffiliateAddress) > 0 {
		i -= len(m.AffiliateAddress)
		copy(dAtA[i:], m.AffiliateAddress)
		i = encodeVarintMsgSwap(dAtA, i, uint64(len(m.AffiliateAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.TradeTarget.Size()
		i -= size
		if _, err := m.TradeTarget.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMsgSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintMsgSwap(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.TargetAsset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgSwap(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMsgSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovMsgSwap(uint64(l))
	l = m.TargetAsset.Size()
	n += 1 + l + sovMsgSwap(uint64(l))
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovMsgSwap(uint64(l))
	}
	l = m.TradeTarget.Size()
	n += 1 + l + sovMsgSwap(uint64(l))
	l = len(m.AffiliateAddress)
	if l > 0 {
		n += 1 + l + sovMsgSwap(uint64(l))
	}
	l = m.AffiliateBasisPoints.Size()
	n += 1 + l + sovMsgSwap(uint64(l))
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsgSwap(uint64(l))
	}
	l = len(m.Aggregator)
	if l > 0 {
		n += 1 + l + sovMsgSwap(uint64(l))
	}
	l = len(m.AggregatorTargetAddress)
	if l > 0 {
		n += 1 + l + sovMsgSwap(uint64(l))
	}
	if m.AggregatorTargetLimit != nil {
		l = m.AggregatorTargetLimit.Size()
		n += 1 + l + sovMsgSwap(uint64(l))
	}
	if m.OrderType != 0 {
		n += 1 + sovMsgSwap(uint64(m.OrderType))
	}
	return n
}

func sovMsgSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgSwap(x uint64) (n int) {
	return sovMsgSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = gitlab_com_thorchain_thornode_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradeTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffiliateAddress = gitlab_com_thorchain_thornode_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffiliateBasisPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AffiliateBasisPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aggregator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aggregator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregatorTargetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorTargetLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgSwap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Uint
			m.AggregatorTargetLimit = &v
			if err := m.AggregatorTargetLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= OrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgSwap = fmt.Errorf("proto: unexpected end of group")
)
