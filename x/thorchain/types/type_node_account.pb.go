// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/types/type_node_account.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "gitlab.com/thorchain/thornode/common"
	gitlab_com_thorchain_thornode_common "gitlab.com/thorchain/thornode/common"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NodeStatus int32

const (
	NodeStatus_Unknown     NodeStatus = 0
	NodeStatus_Whitelisted NodeStatus = 1
	NodeStatus_Standby     NodeStatus = 2
	NodeStatus_Ready       NodeStatus = 3
	NodeStatus_Active      NodeStatus = 4
	NodeStatus_Disabled    NodeStatus = 5
)

var NodeStatus_name = map[int32]string{
	0: "Unknown",
	1: "Whitelisted",
	2: "Standby",
	3: "Ready",
	4: "Active",
	5: "Disabled",
}

var NodeStatus_value = map[string]int32{
	"Unknown":     0,
	"Whitelisted": 1,
	"Standby":     2,
	"Ready":       3,
	"Active":      4,
	"Disabled":    5,
}

func (x NodeStatus) String() string {
	return proto.EnumName(NodeStatus_name, int32(x))
}

func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_553b0a276f7a08b4, []int{0}
}

type NodeType int32

const (
	NodeType_TypeValidator NodeType = 0
	NodeType_TypeVault     NodeType = 1
	NodeType_TypeUnknown   NodeType = 2
)

var NodeType_name = map[int32]string{
	0: "TypeValidator",
	1: "TypeVault",
	2: "TypeUnknown",
}

var NodeType_value = map[string]int32{
	"TypeValidator": 0,
	"TypeVault":     1,
	"TypeUnknown":   2,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}

func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_553b0a276f7a08b4, []int{1}
}

type NodeAccount struct {
	NodeAddress         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"node_address,omitempty"`
	Status              NodeStatus                                    `protobuf:"varint,2,opt,name=status,proto3,enum=types.NodeStatus" json:"status,omitempty"`
	PubKeySet           common.PubKeySet                              `protobuf:"bytes,3,opt,name=pub_key_set,json=pubKeySet,proto3" json:"pub_key_set"`
	ValidatorConsPubKey string                                        `protobuf:"bytes,4,opt,name=validator_cons_pub_key,json=validatorConsPubKey,proto3" json:"validator_cons_pub_key,omitempty"`
	Bond                github_com_cosmos_cosmos_sdk_types.Uint       `protobuf:"bytes,5,opt,name=bond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"bond"`
	ActiveBlockHeight   int64                                         `protobuf:"varint,6,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
	BondAddress         gitlab_com_thorchain_thornode_common.Address  `protobuf:"bytes,7,opt,name=bond_address,json=bondAddress,proto3,casttype=gitlab.com/thorchain/thornode/common.Address" json:"bond_address,omitempty"`
	StatusSince         int64                                         `protobuf:"varint,8,opt,name=status_since,json=statusSince,proto3" json:"status_since,omitempty"`
	SignerMembership    []string                                      `protobuf:"bytes,9,rep,name=signer_membership,json=signerMembership,proto3" json:"signer_membership,omitempty"`
	RequestedToLeave    bool                                          `protobuf:"varint,10,opt,name=requested_to_leave,json=requestedToLeave,proto3" json:"requested_to_leave,omitempty"`
	ForcedToLeave       bool                                          `protobuf:"varint,11,opt,name=forced_to_leave,json=forcedToLeave,proto3" json:"forced_to_leave,omitempty"`
	LeaveScore          uint64                                        `protobuf:"varint,12,opt,name=leave_score,json=leaveScore,proto3" json:"leave_score,omitempty"`
	IPAddress           string                                        `protobuf:"bytes,13,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Version             string                                        `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	Type                NodeType                                      `protobuf:"varint,15,opt,name=type,proto3,enum=types.NodeType" json:"type,omitempty"`
}

func (m *NodeAccount) Reset()      { *m = NodeAccount{} }
func (*NodeAccount) ProtoMessage() {}
func (*NodeAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_553b0a276f7a08b4, []int{0}
}
func (m *NodeAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeAccount.Merge(m, src)
}
func (m *NodeAccount) XXX_Size() int {
	return m.Size()
}
func (m *NodeAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeAccount.DiscardUnknown(m)
}

var xxx_messageInfo_NodeAccount proto.InternalMessageInfo

type BondProvider struct {
	BondAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=bond_address,json=bondAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"bond_address,omitempty"`
	Bond        github_com_cosmos_cosmos_sdk_types.Uint       `protobuf:"bytes,2,opt,name=bond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"bond"`
}

func (m *BondProvider) Reset()      { *m = BondProvider{} }
func (*BondProvider) ProtoMessage() {}
func (*BondProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_553b0a276f7a08b4, []int{1}
}
func (m *BondProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondProvider.Merge(m, src)
}
func (m *BondProvider) XXX_Size() int {
	return m.Size()
}
func (m *BondProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_BondProvider.DiscardUnknown(m)
}

var xxx_messageInfo_BondProvider proto.InternalMessageInfo

type BondProviders struct {
	NodeAddress     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=node_address,json=nodeAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"node_address,omitempty"`
	NodeOperatorFee github_com_cosmos_cosmos_sdk_types.Uint       `protobuf:"bytes,2,opt,name=node_operator_fee,json=nodeOperatorFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"node_operator_fee"`
	LastUpdate      int64                                         `protobuf:"varint,3,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Providers       []BondProvider                                `protobuf:"bytes,4,rep,name=providers,proto3" json:"providers"`
}

func (m *BondProviders) Reset()      { *m = BondProviders{} }
func (*BondProviders) ProtoMessage() {}
func (*BondProviders) Descriptor() ([]byte, []int) {
	return fileDescriptor_553b0a276f7a08b4, []int{2}
}
func (m *BondProviders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondProviders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondProviders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondProviders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondProviders.Merge(m, src)
}
func (m *BondProviders) XXX_Size() int {
	return m.Size()
}
func (m *BondProviders) XXX_DiscardUnknown() {
	xxx_messageInfo_BondProviders.DiscardUnknown(m)
}

var xxx_messageInfo_BondProviders proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("types.NodeStatus", NodeStatus_name, NodeStatus_value)
	proto.RegisterEnum("types.NodeType", NodeType_name, NodeType_value)
	proto.RegisterType((*NodeAccount)(nil), "types.NodeAccount")
	proto.RegisterType((*BondProvider)(nil), "types.BondProvider")
	proto.RegisterType((*BondProviders)(nil), "types.BondProviders")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/types/type_node_account.proto", fileDescriptor_553b0a276f7a08b4)
}

var fileDescriptor_553b0a276f7a08b4 = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xb6, 0x13, 0x37, 0xad, 0x5f, 0x27, 0x1b, 0x67, 0x8a, 0x90, 0xd5, 0x83, 0x63, 0x8a, 0x04,
	0x66, 0xe9, 0x26, 0x6c, 0x57, 0x62, 0x25, 0x6e, 0x4d, 0x11, 0x02, 0xf1, 0x55, 0x39, 0x2d, 0x48,
	0x70, 0xb0, 0xfc, 0x31, 0x9b, 0x8c, 0x92, 0xcc, 0x18, 0xcf, 0x24, 0x90, 0x5b, 0x7f, 0x02, 0xbf,
	0x01, 0x71, 0xe0, 0xc6, 0xdf, 0xe8, 0x71, 0x8f, 0x2b, 0x84, 0x22, 0x36, 0xfd, 0x17, 0x7b, 0x42,
	0x33, 0x13, 0x67, 0xb3, 0x42, 0x42, 0xa8, 0x68, 0x2f, 0x19, 0xcf, 0xf3, 0xbc, 0xf3, 0xbc, 0xf3,
	0x7e, 0x4d, 0xe0, 0x43, 0x31, 0x66, 0x65, 0x36, 0x4e, 0x08, 0xed, 0x2f, 0x1e, 0xf6, 0x7f, 0xea,
	0xbf, 0xdc, 0x8a, 0x65, 0x81, 0xb9, 0xfa, 0x8d, 0x29, 0xcb, 0x71, 0x9c, 0x64, 0x19, 0x9b, 0x53,
	0xd1, 0x2b, 0x4a, 0x26, 0x18, 0xda, 0x53, 0xf4, 0x51, 0xf0, 0xca, 0xf1, 0x8c, 0xcd, 0x66, 0x8c,
	0x6e, 0x16, 0x6d, 0x78, 0xf4, 0xc6, 0x88, 0x8d, 0x98, 0xfa, 0xec, 0xcb, 0x2f, 0x8d, 0x1e, 0x5f,
	0x37, 0xc0, 0xf9, 0x8a, 0xe5, 0xf8, 0x4c, 0x8b, 0xa2, 0x4b, 0x68, 0x6a, 0x27, 0x79, 0x5e, 0x62,
	0xce, 0x3d, 0x33, 0x30, 0xc3, 0xe6, 0xe0, 0xe1, 0x8b, 0x55, 0xf7, 0xc1, 0x88, 0x88, 0xf1, 0x3c,
	0xed, 0x65, 0x6c, 0xd6, 0xcf, 0x18, 0x9f, 0x31, 0xbe, 0x59, 0x1e, 0xf0, 0x7c, 0xa2, 0x2f, 0xd9,
	0x3b, 0xcb, 0xb2, 0x33, 0x7d, 0x30, 0x72, 0xa4, 0xcc, 0x66, 0x83, 0xde, 0x83, 0x06, 0x17, 0x89,
	0x98, 0x73, 0xaf, 0x16, 0x98, 0xe1, 0xbd, 0xd3, 0x4e, 0x4f, 0xdb, 0x4b, 0xcf, 0x43, 0x45, 0x44,
	0x1b, 0x03, 0xf4, 0x18, 0x9c, 0x62, 0x9e, 0xc6, 0x13, 0xbc, 0x8c, 0x39, 0x16, 0x5e, 0x3d, 0x30,
	0x43, 0xe7, 0xb4, 0xd3, 0xdb, 0x84, 0x72, 0x31, 0x4f, 0x3f, 0xc7, 0xcb, 0x21, 0x16, 0x03, 0xeb,
	0x66, 0xd5, 0x35, 0x22, 0xbb, 0xa8, 0x00, 0xf4, 0x08, 0xde, 0x5c, 0x24, 0x53, 0x92, 0x27, 0x82,
	0x95, 0x71, 0xc6, 0x28, 0x8f, 0x37, 0x3a, 0x9e, 0x15, 0x98, 0xa1, 0x1d, 0x1d, 0x6e, 0xd9, 0x73,
	0x46, 0xb9, 0x16, 0x42, 0xe7, 0x60, 0xa5, 0x8c, 0xe6, 0xde, 0x9e, 0x34, 0x19, 0xf4, 0xa5, 0xe6,
	0x1f, 0xab, 0xee, 0xbb, 0xff, 0x21, 0xd4, 0x2b, 0x42, 0x45, 0xa4, 0x0e, 0xa3, 0x1e, 0x1c, 0x26,
	0x99, 0x20, 0x0b, 0x1c, 0xa7, 0x53, 0x96, 0x4d, 0xe2, 0x31, 0x26, 0xa3, 0xb1, 0xf0, 0x1a, 0x81,
	0x19, 0xd6, 0xa3, 0x8e, 0xa6, 0x06, 0x92, 0xf9, 0x54, 0x11, 0x68, 0x08, 0x4d, 0x79, 0x6e, 0x9b,
	0xe3, 0x7d, 0xe5, 0xfc, 0x83, 0x17, 0xab, 0xee, 0xc9, 0x88, 0x88, 0x69, 0xa2, 0x1d, 0xef, 0x34,
	0xc0, 0x98, 0x95, 0x32, 0x9b, 0x55, 0x3d, 0xb7, 0x29, 0x96, 0x2a, 0x55, 0x8a, 0xdf, 0x82, 0xa6,
	0xce, 0x60, 0xcc, 0x09, 0xcd, 0xb0, 0x77, 0xa0, 0xbc, 0x3b, 0x1a, 0x1b, 0x4a, 0x08, 0xbd, 0x0f,
	0x1d, 0x4e, 0x46, 0x14, 0x97, 0xf1, 0x0c, 0xcf, 0x52, 0x5c, 0xf2, 0x31, 0x29, 0x3c, 0x3b, 0xa8,
	0x87, 0x76, 0xe4, 0x6a, 0xe2, 0xcb, 0x2d, 0x8e, 0x4e, 0x00, 0x95, 0xf8, 0x87, 0x39, 0xe6, 0x02,
	0xe7, 0xb1, 0x60, 0xf1, 0x14, 0x27, 0x0b, 0xec, 0x41, 0x60, 0x86, 0x07, 0x91, 0xbb, 0x65, 0x2e,
	0xd9, 0x17, 0x12, 0x47, 0xef, 0x40, 0xfb, 0x09, 0x2b, 0xb3, 0x5d, 0x53, 0x47, 0x99, 0xb6, 0x34,
	0x5c, 0xd9, 0x75, 0xc1, 0x51, 0x6c, 0xcc, 0x33, 0x56, 0x62, 0xaf, 0x19, 0x98, 0xa1, 0x15, 0x81,
	0x82, 0x86, 0x12, 0x41, 0x27, 0x00, 0xa4, 0xd8, 0x66, 0xa6, 0xa5, 0x32, 0xd3, 0x5a, 0xaf, 0xba,
	0xf6, 0x67, 0x17, 0x55, 0xd8, 0x36, 0x29, 0xaa, 0xa0, 0x3d, 0xd8, 0x5f, 0xe0, 0x92, 0x13, 0x46,
	0xbd, 0x7b, 0xaa, 0xc8, 0xd5, 0x16, 0xbd, 0x0d, 0x96, 0xac, 0x93, 0xd7, 0x56, 0xfd, 0xd6, 0xde,
	0xe9, 0xb7, 0xcb, 0x65, 0x81, 0x23, 0x45, 0x7e, 0x64, 0x5d, 0xff, 0x19, 0x18, 0xc7, 0xbf, 0x9b,
	0xd0, 0x1c, 0x30, 0x9a, 0x5f, 0x94, 0x6c, 0x41, 0x72, 0x5c, 0xca, 0x19, 0x78, 0xa5, 0x3e, 0x77,
	0x9f, 0x81, 0xdd, 0x02, 0x55, 0xad, 0x56, 0xfb, 0x1f, 0xad, 0xa6, 0x6e, 0x6c, 0x1e, 0xff, 0x52,
	0x83, 0xd6, 0xee, 0x8d, 0xf9, 0x6b, 0x1a, 0xdb, 0xef, 0xa1, 0xa3, 0x54, 0x59, 0x81, 0x4b, 0x35,
	0x56, 0x4f, 0x30, 0xbe, 0xeb, 0xfd, 0xdb, 0x52, 0xe9, 0xeb, 0x8d, 0xd0, 0x27, 0x58, 0xb7, 0x42,
	0xc2, 0x45, 0x3c, 0x2f, 0xf2, 0x44, 0x60, 0x35, 0xe8, 0xf5, 0x08, 0x24, 0x74, 0xa5, 0x10, 0xf4,
	0x18, 0xec, 0xa2, 0x0a, 0xd0, 0xb3, 0x82, 0x7a, 0xe8, 0x9c, 0x1e, 0x6e, 0xea, 0xb8, 0x1b, 0xfc,
	0xf6, 0x25, 0xa8, 0x6c, 0x75, 0x92, 0xee, 0xa7, 0x00, 0x2f, 0x9f, 0x17, 0xe4, 0xc0, 0xfe, 0x15,
	0x9d, 0x50, 0xf6, 0x23, 0x75, 0x0d, 0xd4, 0x06, 0xe7, 0xdb, 0x31, 0x11, 0x78, 0x4a, 0x64, 0x0f,
	0xbb, 0xa6, 0x64, 0x87, 0x22, 0xa1, 0x79, 0xba, 0x74, 0x6b, 0xc8, 0x86, 0xbd, 0x08, 0x27, 0xf9,
	0xd2, 0xad, 0x23, 0x80, 0xc6, 0x99, 0x1a, 0x5f, 0xd7, 0x42, 0x4d, 0x38, 0xf8, 0x98, 0xf0, 0x24,
	0x9d, 0xe2, 0xdc, 0xdd, 0x3b, 0xb2, 0x7e, 0xfb, 0xd5, 0x37, 0xef, 0x9f, 0xc3, 0x41, 0xd5, 0x52,
	0xa8, 0x03, 0x2d, 0xb9, 0x7e, 0x53, 0xbd, 0x32, 0xae, 0x81, 0x5a, 0x60, 0x6b, 0x68, 0x3e, 0x15,
	0xae, 0x29, 0xdd, 0xca, 0x6d, 0x75, 0x8f, 0x9a, 0x16, 0x19, 0x5c, 0xdd, 0x3c, 0xf7, 0x8d, 0x67,
	0xcf, 0x7d, 0xe3, 0x7a, 0xed, 0x1b, 0x37, 0x6b, 0xdf, 0x7c, 0xba, 0xf6, 0xcd, 0xbf, 0xd6, 0xbe,
	0xf9, 0xf3, 0xad, 0x6f, 0x3c, 0xbd, 0xf5, 0x8d, 0x67, 0xb7, 0xbe, 0xf1, 0x5d, 0xff, 0xdf, 0x9f,
	0x86, 0x7f, 0xfc, 0x61, 0xa4, 0x0d, 0xf5, 0xc0, 0x3f, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x2b,
	0xe3, 0x49, 0x10, 0x59, 0x06, 0x00, 0x00,
}

func (m *NodeAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.IPAddress) > 0 {
		i -= len(m.IPAddress)
		copy(dAtA[i:], m.IPAddress)
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(len(m.IPAddress)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LeaveScore != 0 {
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(m.LeaveScore))
		i--
		dAtA[i] = 0x60
	}
	if m.ForcedToLeave {
		i--
		if m.ForcedToLeave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.RequestedToLeave {
		i--
		if m.RequestedToLeave {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.SignerMembership) > 0 {
		for iNdEx := len(m.SignerMembership) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SignerMembership[iNdEx])
			copy(dAtA[i:], m.SignerMembership[iNdEx])
			i = encodeVarintTypeNodeAccount(dAtA, i, uint64(len(m.SignerMembership[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.StatusSince != 0 {
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(m.StatusSince))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BondAddress) > 0 {
		i -= len(m.BondAddress)
		copy(dAtA[i:], m.BondAddress)
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(len(m.BondAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ValidatorConsPubKey) > 0 {
		i -= len(m.ValidatorConsPubKey)
		copy(dAtA[i:], m.ValidatorConsPubKey)
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(len(m.ValidatorConsPubKey)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.PubKeySet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Status != 0 {
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.BondAddress) > 0 {
		i -= len(m.BondAddress)
		copy(dAtA[i:], m.BondAddress)
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(len(m.BondAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BondProviders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondProviders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondProviders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Providers) > 0 {
		for iNdEx := len(m.Providers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Providers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypeNodeAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.LastUpdate != 0 {
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(m.LastUpdate))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.NodeOperatorFee.Size()
		i -= size
		if _, err := m.NodeOperatorFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.NodeAddress) > 0 {
		i -= len(m.NodeAddress)
		copy(dAtA[i:], m.NodeAddress)
		i = encodeVarintTypeNodeAccount(dAtA, i, uint64(len(m.NodeAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypeNodeAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypeNodeAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovTypeNodeAccount(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypeNodeAccount(uint64(m.Status))
	}
	l = m.PubKeySet.Size()
	n += 1 + l + sovTypeNodeAccount(uint64(l))
	l = len(m.ValidatorConsPubKey)
	if l > 0 {
		n += 1 + l + sovTypeNodeAccount(uint64(l))
	}
	l = m.Bond.Size()
	n += 1 + l + sovTypeNodeAccount(uint64(l))
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovTypeNodeAccount(uint64(m.ActiveBlockHeight))
	}
	l = len(m.BondAddress)
	if l > 0 {
		n += 1 + l + sovTypeNodeAccount(uint64(l))
	}
	if m.StatusSince != 0 {
		n += 1 + sovTypeNodeAccount(uint64(m.StatusSince))
	}
	if len(m.SignerMembership) > 0 {
		for _, s := range m.SignerMembership {
			l = len(s)
			n += 1 + l + sovTypeNodeAccount(uint64(l))
		}
	}
	if m.RequestedToLeave {
		n += 2
	}
	if m.ForcedToLeave {
		n += 2
	}
	if m.LeaveScore != 0 {
		n += 1 + sovTypeNodeAccount(uint64(m.LeaveScore))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovTypeNodeAccount(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTypeNodeAccount(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypeNodeAccount(uint64(m.Type))
	}
	return n
}

func (m *BondProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondAddress)
	if l > 0 {
		n += 1 + l + sovTypeNodeAccount(uint64(l))
	}
	l = m.Bond.Size()
	n += 1 + l + sovTypeNodeAccount(uint64(l))
	return n
}

func (m *BondProviders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeAddress)
	if l > 0 {
		n += 1 + l + sovTypeNodeAccount(uint64(l))
	}
	l = m.NodeOperatorFee.Size()
	n += 1 + l + sovTypeNodeAccount(uint64(l))
	if m.LastUpdate != 0 {
		n += 1 + sovTypeNodeAccount(uint64(m.LastUpdate))
	}
	if len(m.Providers) > 0 {
		for _, e := range m.Providers {
			l = e.Size()
			n += 1 + l + sovTypeNodeAccount(uint64(l))
		}
	}
	return n
}

func sovTypeNodeAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypeNodeAccount(x uint64) (n int) {
	return sovTypeNodeAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BondProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BondProvider{`,
		`BondAddress:` + fmt.Sprintf("%v", this.BondAddress) + `,`,
		`Bond:` + fmt.Sprintf("%v", this.Bond) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BondProviders) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProviders := "[]BondProvider{"
	for _, f := range this.Providers {
		repeatedStringForProviders += strings.Replace(strings.Replace(f.String(), "BondProvider", "BondProvider", 1), `&`, ``, 1) + ","
	}
	repeatedStringForProviders += "}"
	s := strings.Join([]string{`&BondProviders{`,
		`NodeAddress:` + fmt.Sprintf("%v", this.NodeAddress) + `,`,
		`NodeOperatorFee:` + fmt.Sprintf("%v", this.NodeOperatorFee) + `,`,
		`LastUpdate:` + fmt.Sprintf("%v", this.LastUpdate) + `,`,
		`Providers:` + repeatedStringForProviders + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypeNodeAccount(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NodeAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeNodeAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = append(m.NodeAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeAddress == nil {
				m.NodeAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NodeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeySet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PubKeySet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorConsPubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorConsPubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondAddress = gitlab_com_thorchain_thornode_common.Address(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusSince", wireType)
			}
			m.StatusSince = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusSince |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerMembership", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerMembership = append(m.SignerMembership, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedToLeave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequestedToLeave = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcedToLeave", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcedToLeave = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveScore", wireType)
			}
			m.LeaveScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaveScore |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NodeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypeNodeAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeNodeAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondAddress = append(m.BondAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.BondAddress == nil {
				m.BondAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeNodeAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondProviders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypeNodeAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondProviders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondProviders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddress = append(m.NodeAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeAddress == nil {
				m.NodeAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeOperatorFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeOperatorFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
			}
			m.LastUpdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Providers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Providers = append(m.Providers, BondProvider{})
			if err := m.Providers[len(m.Providers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypeNodeAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypeNodeAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypeNodeAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypeNodeAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypeNodeAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypeNodeAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypeNodeAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypeNodeAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypeNodeAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypeNodeAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypeNodeAccount = fmt.Errorf("proto: unexpected end of group")
)
