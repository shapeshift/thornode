// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/genesis.proto

package thorchain

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	gitlab_com_thorchain_thornode_x_thorchain_types "gitlab.com/thorchain/thornode/x/thorchain/types"
	types "gitlab.com/thorchain/thornode/x/thorchain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenesisState struct {
	Pools                []types.Pool                                                        `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
	LiquidityProviders   gitlab_com_thorchain_thornode_x_thorchain_types.LiquidityProviders  `protobuf:"bytes,2,rep,name=liquidity_providers,json=liquidityProviders,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.LiquidityProviders" json:"liquidity_providers"`
	ObservedTxInVoters   gitlab_com_thorchain_thornode_x_thorchain_types.ObservedTxVoters    `protobuf:"bytes,3,rep,name=observed_tx_in_voters,json=observedTxInVoters,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.ObservedTxVoters" json:"observed_tx_in_voters"`
	ObservedTxOutVoters  gitlab_com_thorchain_thornode_x_thorchain_types.ObservedTxVoters    `protobuf:"bytes,4,rep,name=observed_tx_out_voters,json=observedTxOutVoters,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.ObservedTxVoters" json:"observed_tx_out_voters"`
	TxOuts               []types.TxOut                                                       `protobuf:"bytes,5,rep,name=tx_outs,json=txOuts,proto3" json:"tx_outs"`
	NodeAccounts         gitlab_com_thorchain_thornode_x_thorchain_types.NodeAccounts        `protobuf:"bytes,6,rep,name=node_accounts,json=nodeAccounts,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.NodeAccounts" json:"node_accounts"`
	Vaults               gitlab_com_thorchain_thornode_x_thorchain_types.Vaults              `protobuf:"bytes,7,rep,name=vaults,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.Vaults" json:"vaults"`
	Reserve              uint64                                                              `protobuf:"varint,8,opt,name=reserve,proto3" json:"reserve,omitempty"`
	BanVoters            []types.BanVoter                                                    `protobuf:"bytes,9,rep,name=ban_voters,json=banVoters,proto3" json:"ban_voters"`
	LastSignedHeight     int64                                                               `protobuf:"varint,10,opt,name=last_signed_height,json=lastSignedHeight,proto3" json:"last_signed_height,omitempty"`
	LastChainHeights     map[string]int64                                                    `protobuf:"bytes,11,rep,name=last_chain_heights,json=lastChainHeights,proto3" json:"last_chain_heights,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ReserveContributors  gitlab_com_thorchain_thornode_x_thorchain_types.ReserveContributors `protobuf:"bytes,12,rep,name=reserve_contributors,json=reserveContributors,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.ReserveContributors" json:"reserve_contributors"`
	Network              types.Network                                                       `protobuf:"bytes,13,opt,name=network,proto3" json:"network"`
	TssVoters            []types.TssVoter                                                    `protobuf:"bytes,14,rep,name=tss_voters,json=tssVoters,proto3" json:"tss_voters"`
	TssKeysignFailVoters []types.TssKeysignFailVoter                                         `protobuf:"bytes,15,rep,name=tss_keysign_fail_voters,json=tssKeysignFailVoters,proto3" json:"tss_keysign_fail_voters"`
	KeygenBlocks         []types.KeygenBlock                                                 `protobuf:"bytes,16,rep,name=keygen_blocks,json=keygenBlocks,proto3" json:"keygen_blocks"`
	ErrataTxVoters       []types.ErrataTxVoter                                               `protobuf:"bytes,18,rep,name=errata_tx_voters,json=errataTxVoters,proto3" json:"errata_tx_voters"`
	MsgSwaps             []types.MsgSwap                                                     `protobuf:"bytes,19,rep,name=msg_swaps,json=msgSwaps,proto3" json:"msg_swaps"`
	NetworkFees          []types.NetworkFee                                                  `protobuf:"bytes,20,rep,name=network_fees,json=networkFees,proto3" json:"network_fees"`
	NetworkFeeVoters     []types.ObservedNetworkFeeVoter                                     `protobuf:"bytes,21,rep,name=network_fee_voters,json=networkFeeVoters,proto3" json:"network_fee_voters"`
	ChainContracts       []types.ChainContract                                               `protobuf:"bytes,22,rep,name=chain_contracts,json=chainContracts,proto3" json:"chain_contracts"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b10f0e2a2ac9ce40, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetPools() []types.Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *GenesisState) GetLiquidityProviders() gitlab_com_thorchain_thornode_x_thorchain_types.LiquidityProviders {
	if m != nil {
		return m.LiquidityProviders
	}
	return nil
}

func (m *GenesisState) GetObservedTxInVoters() gitlab_com_thorchain_thornode_x_thorchain_types.ObservedTxVoters {
	if m != nil {
		return m.ObservedTxInVoters
	}
	return nil
}

func (m *GenesisState) GetObservedTxOutVoters() gitlab_com_thorchain_thornode_x_thorchain_types.ObservedTxVoters {
	if m != nil {
		return m.ObservedTxOutVoters
	}
	return nil
}

func (m *GenesisState) GetTxOuts() []types.TxOut {
	if m != nil {
		return m.TxOuts
	}
	return nil
}

func (m *GenesisState) GetNodeAccounts() gitlab_com_thorchain_thornode_x_thorchain_types.NodeAccounts {
	if m != nil {
		return m.NodeAccounts
	}
	return nil
}

func (m *GenesisState) GetVaults() gitlab_com_thorchain_thornode_x_thorchain_types.Vaults {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *GenesisState) GetReserve() uint64 {
	if m != nil {
		return m.Reserve
	}
	return 0
}

func (m *GenesisState) GetBanVoters() []types.BanVoter {
	if m != nil {
		return m.BanVoters
	}
	return nil
}

func (m *GenesisState) GetLastSignedHeight() int64 {
	if m != nil {
		return m.LastSignedHeight
	}
	return 0
}

func (m *GenesisState) GetLastChainHeights() map[string]int64 {
	if m != nil {
		return m.LastChainHeights
	}
	return nil
}

func (m *GenesisState) GetReserveContributors() gitlab_com_thorchain_thornode_x_thorchain_types.ReserveContributors {
	if m != nil {
		return m.ReserveContributors
	}
	return nil
}

func (m *GenesisState) GetNetwork() types.Network {
	if m != nil {
		return m.Network
	}
	return types.Network{}
}

func (m *GenesisState) GetTssVoters() []types.TssVoter {
	if m != nil {
		return m.TssVoters
	}
	return nil
}

func (m *GenesisState) GetTssKeysignFailVoters() []types.TssKeysignFailVoter {
	if m != nil {
		return m.TssKeysignFailVoters
	}
	return nil
}

func (m *GenesisState) GetKeygenBlocks() []types.KeygenBlock {
	if m != nil {
		return m.KeygenBlocks
	}
	return nil
}

func (m *GenesisState) GetErrataTxVoters() []types.ErrataTxVoter {
	if m != nil {
		return m.ErrataTxVoters
	}
	return nil
}

func (m *GenesisState) GetMsgSwaps() []types.MsgSwap {
	if m != nil {
		return m.MsgSwaps
	}
	return nil
}

func (m *GenesisState) GetNetworkFees() []types.NetworkFee {
	if m != nil {
		return m.NetworkFees
	}
	return nil
}

func (m *GenesisState) GetNetworkFeeVoters() []types.ObservedNetworkFeeVoter {
	if m != nil {
		return m.NetworkFeeVoters
	}
	return nil
}

func (m *GenesisState) GetChainContracts() []types.ChainContract {
	if m != nil {
		return m.ChainContracts
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "thorchain.GenesisState")
	proto.RegisterMapType((map[string]int64)(nil), "thorchain.GenesisState.LastChainHeightsEntry")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/genesis.proto", fileDescriptor_b10f0e2a2ac9ce40)
}

var fileDescriptor_b10f0e2a2ac9ce40 = []byte{
	// 954 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xe6, 0xb7, 0x1e, 0x3b, 0x89, 0x99, 0x38, 0x61, 0xf0, 0x85, 0x6b, 0x71, 0x01, 0x46,
	0x50, 0x9b, 0xb4, 0x50, 0x95, 0xaa, 0xad, 0x60, 0xdd, 0x96, 0x42, 0x0a, 0xad, 0x36, 0x55, 0x91,
	0xe0, 0x62, 0x35, 0xb6, 0xa7, 0xeb, 0x95, 0x37, 0x3b, 0x66, 0xcf, 0xd8, 0xb1, 0x2f, 0x78, 0x07,
	0x24, 0x84, 0x10, 0xaf, 0xc0, 0x93, 0xf4, 0x32, 0x97, 0x5c, 0x01, 0x4a, 0x5e, 0x04, 0xed, 0xcc,
	0x59, 0x7b, 0x37, 0x0e, 0x62, 0x7d, 0xd3, 0x1b, 0xcb, 0x73, 0xce, 0xf9, 0xbe, 0xf9, 0xe6, 0x3b,
	0xf3, 0xb3, 0xe4, 0x3d, 0xd5, 0x97, 0x51, 0xb7, 0xcf, 0xfd, 0xb0, 0x35, 0x3e, 0x6c, 0x4d, 0x5a,
	0xf3, 0xa1, 0x27, 0x42, 0x01, 0x3e, 0x34, 0x87, 0x91, 0x54, 0x92, 0x16, 0x66, 0x89, 0x6a, 0xf3,
	0x3f, 0x21, 0x6a, 0x3a, 0x14, 0xa0, 0x7f, 0xdd, 0xa1, 0x94, 0x81, 0x81, 0x56, 0xef, 0xe4, 0xa9,
	0xd7, 0x01, 0xb7, 0x2b, 0x43, 0x15, 0xf1, 0xae, 0x42, 0xe4, 0xa7, 0x79, 0x90, 0xa1, 0x50, 0xa7,
	0x32, 0x1a, 0xb8, 0xaf, 0x84, 0x40, 0xd8, 0x83, 0x3c, 0x30, 0xd9, 0x01, 0x11, 0x8d, 0x45, 0xef,
	0x0a, 0xfc, 0x67, 0x79, 0xf0, 0x22, 0x8a, 0xb8, 0xe2, 0xae, 0x9a, 0xb8, 0x63, 0xa9, 0x44, 0x84,
	0xd0, 0x1b, 0xff, 0x03, 0x3d, 0x01, 0xcf, 0x85, 0x53, 0x3e, 0xcc, 0x59, 0xae, 0x67, 0x52, 0x00,
	0xcb, 0xf8, 0xa1, 0x00, 0xdc, 0x81, 0x98, 0x82, 0xef, 0x85, 0x08, 0xfb, 0x38, 0x0f, 0x6c, 0x20,
	0xa6, 0x9e, 0x48, 0x10, 0x87, 0x4b, 0x18, 0x8f, 0x90, 0xfb, 0x79, 0x20, 0x91, 0xd0, 0xa6, 0x9b,
	0x3e, 0xfb, 0x9d, 0x91, 0x92, 0x89, 0x71, 0xad, 0x3c, 0xf0, 0x31, 0x1f, 0x05, 0xc9, 0xde, 0xb8,
	0x95, 0x07, 0xd0, 0xe1, 0x61, 0xa6, 0x3d, 0xb9, 0x9c, 0x50, 0x13, 0x57, 0x8e, 0x92, 0x69, 0x6e,
	0xe7, 0x72, 0x42, 0xf6, 0x84, 0xcb, 0xbb, 0x5d, 0x39, 0x0a, 0x97, 0xda, 0xba, 0xb3, 0x3d, 0xa8,
	0x26, 0x08, 0xbb, 0x97, 0x07, 0x16, 0xf8, 0x3f, 0x8e, 0xfc, 0x9e, 0xaf, 0xa6, 0xee, 0x30, 0x92,
	0x63, 0xbf, 0x37, 0x5b, 0x5e, 0xc5, 0x93, 0x9e, 0xd4, 0x7f, 0x5b, 0xf1, 0x3f, 0x13, 0x7d, 0xf7,
	0xb7, 0x1d, 0x52, 0xfa, 0xd2, 0x1c, 0xe6, 0x63, 0xc5, 0x95, 0xa0, 0xef, 0x93, 0x8d, 0xf8, 0x78,
	0x02, 0xb3, 0xea, 0x6b, 0x8d, 0xe2, 0xcd, 0x62, 0x53, 0x73, 0x37, 0x9f, 0x4b, 0x19, 0xd8, 0xeb,
	0xaf, 0xff, 0xba, 0xbe, 0xe2, 0x98, 0x3c, 0xfd, 0xd5, 0x22, 0x7b, 0x8b, 0x93, 0x01, 0x5b, 0xd5,
	0x38, 0x86, 0xb8, 0xa7, 0x49, 0xc5, 0x73, 0x2c, 0xb0, 0xbf, 0x8e, 0x49, 0xfe, 0xf8, 0xfb, 0xba,
	0xed, 0xf9, 0x2a, 0xe0, 0x9d, 0x66, 0x57, 0x9e, 0xa4, 0x57, 0xd2, 0x97, 0x51, 0xec, 0xd8, 0xe2,
	0xf2, 0x16, 0xa9, 0xc0, 0xa1, 0xc1, 0x42, 0x8c, 0xfe, 0x62, 0x91, 0xfd, 0x94, 0x77, 0xae, 0x8f,
	0x5d, 0x06, 0xb6, 0xa6, 0x95, 0x1d, 0xa0, 0xb2, 0x67, 0x58, 0xf3, 0x62, 0xf2, 0x32, 0x4e, 0xdb,
	0x4f, 0x50, 0xd7, 0xe7, 0xcb, 0xea, 0xba, 0x44, 0x04, 0x0e, 0x95, 0xb3, 0xc8, 0x57, 0xa1, 0x89,
	0xc5, 0x6e, 0x1d, 0xa4, 0x55, 0xc9, 0x91, 0x4a, 0x64, 0xad, 0xbf, 0x21, 0x59, 0x7b, 0x73, 0x59,
	0xcf, 0x46, 0x0a, 0x75, 0x7d, 0x48, 0xb6, 0x8c, 0x1a, 0x60, 0x1b, 0x5a, 0x47, 0x09, 0x75, 0xe8,
	0x22, 0xec, 0xf8, 0xa6, 0x8a, 0x07, 0x40, 0x7f, 0x22, 0xdb, 0xe9, 0xdd, 0x0c, 0x6c, 0x53, 0x43,
	0x28, 0x42, 0xbe, 0x95, 0x3d, 0xf1, 0x85, 0x49, 0xd9, 0x0f, 0x51, 0xf6, 0xbd, 0x65, 0x65, 0xa7,
	0x48, 0xc0, 0x29, 0x85, 0xa9, 0x11, 0xed, 0x91, 0x4d, 0x7d, 0xc8, 0x81, 0x6d, 0x65, 0xa4, 0xbe,
	0x8c, 0x83, 0xf6, 0x03, 0x9c, 0xf1, 0xf6, 0xb2, 0x33, 0x6a, 0x38, 0x38, 0xc8, 0x4d, 0x19, 0xd9,
	0xc2, 0x9b, 0x88, 0x5d, 0xab, 0x5b, 0x8d, 0x75, 0x27, 0x19, 0xd2, 0x4f, 0x08, 0x99, 0xdd, 0x19,
	0xc0, 0x0a, 0x5a, 0xc3, 0x2e, 0x6a, 0xb0, 0xb9, 0xe9, 0x34, 0x3a, 0x56, 0xe8, 0xf0, 0xa4, 0xf3,
	0x1f, 0x11, 0x1a, 0x70, 0x50, 0x6e, 0x7c, 0xe7, 0x8a, 0x9e, 0xdb, 0x17, 0xbe, 0xd7, 0x57, 0x8c,
	0xd4, 0xad, 0xc6, 0x9a, 0x53, 0x8e, 0x33, 0xc7, 0x3a, 0xf1, 0x44, 0xc7, 0xe9, 0x0f, 0x58, 0x6d,
	0x9e, 0x3c, 0x53, 0x0c, 0xac, 0xa8, 0xe7, 0xba, 0x31, 0x7f, 0x5c, 0x9b, 0xe9, 0x33, 0xdb, 0x7c,
	0xca, 0x41, 0xb5, 0xe3, 0xb0, 0x21, 0x81, 0x47, 0xa1, 0x8a, 0xa6, 0x86, 0x3c, 0x1d, 0xa6, 0xbf,
	0x5b, 0xa4, 0x72, 0xc5, 0x2d, 0x0b, 0xac, 0xa4, 0xf9, 0xdf, 0xc1, 0xb5, 0x38, 0xa6, 0xa4, 0x3d,
	0xaf, 0xb0, 0x8f, 0xd0, 0xdc, 0xf6, 0xb2, 0xe6, 0x2e, 0x72, 0x81, 0xb3, 0x17, 0x2d, 0x06, 0x69,
	0x93, 0x6c, 0xe1, 0x9b, 0xc1, 0xb6, 0xeb, 0x56, 0xa3, 0x78, 0x73, 0x27, 0xd9, 0x55, 0x26, 0x8a,
	0xc6, 0x26, 0x45, 0x71, 0x33, 0xe2, 0xc7, 0x0c, 0x9b, 0xb1, 0x93, 0x69, 0xc6, 0x0b, 0x80, 0x4c,
	0x33, 0x14, 0x8e, 0x81, 0x7e, 0x47, 0xde, 0x4e, 0x3d, 0x81, 0xee, 0x2b, 0xee, 0x07, 0x09, 0xc5,
	0xae, 0xa6, 0xa8, 0xce, 0x29, 0x8e, 0x4c, 0xd1, 0x63, 0xee, 0x07, 0x69, 0xb6, 0x8a, 0x5a, 0x4c,
	0x01, 0xbd, 0x4f, 0xb6, 0xcd, 0x23, 0xe9, 0x76, 0x02, 0xd9, 0x1d, 0x00, 0x2b, 0x67, 0x8e, 0xc6,
	0x91, 0xce, 0xd9, 0x71, 0x0a, 0x69, 0x4a, 0x83, 0x79, 0x08, 0xe8, 0x43, 0x52, 0xbe, 0xf4, 0xcd,
	0x00, 0x8c, 0x6a, 0x86, 0x0a, 0x32, 0x3c, 0xd2, 0xe9, 0xe4, 0x56, 0x30, 0x1c, 0x3b, 0x22, 0x1d,
	0x04, 0x7a, 0x48, 0x0a, 0xc9, 0x37, 0x04, 0xb0, 0x3d, 0x0d, 0x4f, 0x5c, 0xfc, 0x06, 0xbc, 0xe3,
	0x53, 0x3e, 0x44, 0xe0, 0xb5, 0x13, 0x33, 0x04, 0x7a, 0x97, 0x94, 0x52, 0xdf, 0x38, 0xc0, 0x2a,
	0x1a, 0xf5, 0x56, 0xd6, 0xfb, 0xc7, 0x42, 0x20, 0xb0, 0x18, 0xce, 0x22, 0x40, 0x1d, 0x42, 0x53,
	0xd8, 0x44, 0xf6, 0xbe, 0x66, 0xa8, 0x5d, 0xba, 0xce, 0xe6, 0x4c, 0xe9, 0x05, 0x94, 0xc3, 0x6c,
	0x18, 0x68, 0x9b, 0xec, 0x66, 0xbf, 0xf6, 0x80, 0x1d, 0x64, 0x7c, 0xd0, 0x1b, 0xba, 0x8d, 0xc9,
	0xc4, 0x87, 0x6e, 0x3a, 0x08, 0xd5, 0x36, 0xd9, 0xbf, 0xf2, 0x48, 0xd0, 0x32, 0x59, 0x1b, 0x88,
	0x29, 0xb3, 0xea, 0x56, 0xa3, 0xe0, 0xc4, 0x7f, 0x69, 0x85, 0x6c, 0x8c, 0x79, 0x30, 0x12, 0x6c,
	0x55, 0x1f, 0x48, 0x33, 0xb8, 0xbb, 0x7a, 0xc7, 0xb2, 0xdb, 0xaf, 0xcf, 0x6b, 0xd6, 0xd9, 0x79,
	0xcd, 0xfa, 0xe7, 0xbc, 0x66, 0xfd, 0x7c, 0x51, 0x5b, 0x39, 0xbb, 0xa8, 0xad, 0xfc, 0x79, 0x51,
	0x5b, 0xf9, 0xfe, 0x83, 0xdc, 0x87, 0xa0, 0xb3, 0xa9, 0x5f, 0xd9, 0x5b, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x74, 0xba, 0x73, 0xf2, 0x4a, 0x0b, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainContracts) > 0 {
		for iNdEx := len(m.ChainContracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainContracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.NetworkFeeVoters) > 0 {
		for iNdEx := len(m.NetworkFeeVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkFeeVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.NetworkFees) > 0 {
		for iNdEx := len(m.NetworkFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.MsgSwaps) > 0 {
		for iNdEx := len(m.MsgSwaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MsgSwaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.ErrataTxVoters) > 0 {
		for iNdEx := len(m.ErrataTxVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ErrataTxVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.KeygenBlocks) > 0 {
		for iNdEx := len(m.KeygenBlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeygenBlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.TssKeysignFailVoters) > 0 {
		for iNdEx := len(m.TssKeysignFailVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TssKeysignFailVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.TssVoters) > 0 {
		for iNdEx := len(m.TssVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TssVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	{
		size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.ReserveContributors) > 0 {
		for iNdEx := len(m.ReserveContributors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReserveContributors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.LastChainHeights) > 0 {
		for k := range m.LastChainHeights {
			v := m.LastChainHeights[k]
			baseI := i
			i = encodeVarintGenesis(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenesis(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenesis(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.LastSignedHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSignedHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.BanVoters) > 0 {
		for iNdEx := len(m.BanVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BanVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Reserve != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Reserve))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NodeAccounts) > 0 {
		for iNdEx := len(m.NodeAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TxOuts) > 0 {
		for iNdEx := len(m.TxOuts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxOuts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ObservedTxOutVoters) > 0 {
		for iNdEx := len(m.ObservedTxOutVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObservedTxOutVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ObservedTxInVoters) > 0 {
		for iNdEx := len(m.ObservedTxInVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObservedTxInVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LiquidityProviders) > 0 {
		for iNdEx := len(m.LiquidityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LiquidityProviders) > 0 {
		for _, e := range m.LiquidityProviders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ObservedTxInVoters) > 0 {
		for _, e := range m.ObservedTxInVoters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ObservedTxOutVoters) > 0 {
		for _, e := range m.ObservedTxOutVoters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TxOuts) > 0 {
		for _, e := range m.TxOuts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NodeAccounts) > 0 {
		for _, e := range m.NodeAccounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Reserve != 0 {
		n += 1 + sovGenesis(uint64(m.Reserve))
	}
	if len(m.BanVoters) > 0 {
		for _, e := range m.BanVoters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LastSignedHeight != 0 {
		n += 1 + sovGenesis(uint64(m.LastSignedHeight))
	}
	if len(m.LastChainHeights) > 0 {
		for k, v := range m.LastChainHeights {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenesis(uint64(len(k))) + 1 + sovGenesis(uint64(v))
			n += mapEntrySize + 1 + sovGenesis(uint64(mapEntrySize))
		}
	}
	if len(m.ReserveContributors) > 0 {
		for _, e := range m.ReserveContributors {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.Network.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.TssVoters) > 0 {
		for _, e := range m.TssVoters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TssKeysignFailVoters) > 0 {
		for _, e := range m.TssKeysignFailVoters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.KeygenBlocks) > 0 {
		for _, e := range m.KeygenBlocks {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ErrataTxVoters) > 0 {
		for _, e := range m.ErrataTxVoters {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.MsgSwaps) > 0 {
		for _, e := range m.MsgSwaps {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NetworkFees) > 0 {
		for _, e := range m.NetworkFees {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NetworkFeeVoters) > 0 {
		for _, e := range m.NetworkFeeVoters {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ChainContracts) > 0 {
		for _, e := range m.ChainContracts {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, types.Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviders = append(m.LiquidityProviders, types.LiquidityProvider{})
			if err := m.LiquidityProviders[len(m.LiquidityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedTxInVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedTxInVoters = append(m.ObservedTxInVoters, types.ObservedTxVoter{})
			if err := m.ObservedTxInVoters[len(m.ObservedTxInVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedTxOutVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedTxOutVoters = append(m.ObservedTxOutVoters, types.ObservedTxVoter{})
			if err := m.ObservedTxOutVoters[len(m.ObservedTxOutVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOuts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOuts = append(m.TxOuts, types.TxOut{})
			if err := m.TxOuts[len(m.TxOuts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAccounts = append(m.NodeAccounts, types.NodeAccount{})
			if err := m.NodeAccounts[len(m.NodeAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, types.Vault{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			m.Reserve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reserve |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BanVoters = append(m.BanVoters, types.BanVoter{})
			if err := m.BanVoters[len(m.BanVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSignedHeight", wireType)
			}
			m.LastSignedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSignedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChainHeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastChainHeights == nil {
				m.LastChainHeights = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenesis
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenesis(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenesis
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LastChainHeights[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveContributors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveContributors = append(m.ReserveContributors, types.ReserveContributor{})
			if err := m.ReserveContributors[len(m.ReserveContributors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssVoters = append(m.TssVoters, types.TssVoter{})
			if err := m.TssVoters[len(m.TssVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssKeysignFailVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssKeysignFailVoters = append(m.TssKeysignFailVoters, types.TssKeysignFailVoter{})
			if err := m.TssKeysignFailVoters[len(m.TssKeysignFailVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeygenBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeygenBlocks = append(m.KeygenBlocks, types.KeygenBlock{})
			if err := m.KeygenBlocks[len(m.KeygenBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrataTxVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrataTxVoters = append(m.ErrataTxVoters, types.ErrataTxVoter{})
			if err := m.ErrataTxVoters[len(m.ErrataTxVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSwaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgSwaps = append(m.MsgSwaps, types.MsgSwap{})
			if err := m.MsgSwaps[len(m.MsgSwaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkFees = append(m.NetworkFees, types.NetworkFee{})
			if err := m.NetworkFees[len(m.NetworkFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFeeVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkFeeVoters = append(m.NetworkFeeVoters, types.ObservedNetworkFeeVoter{})
			if err := m.NetworkFeeVoters[len(m.NetworkFeeVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainContracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainContracts = append(m.ChainContracts, types.ChainContract{})
			if err := m.ChainContracts[len(m.ChainContracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
