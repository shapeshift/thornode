// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: thorchain/v1/x/thorchain/genesis.proto

package thorchain

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	gitlab_com_thorchain_thornode_x_thorchain_types "gitlab.com/thorchain/thornode/x/thorchain/types"
	types "gitlab.com/thorchain/thornode/x/thorchain/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LastChainHeight struct {
	Chain  string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Height int64  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *LastChainHeight) Reset()         { *m = LastChainHeight{} }
func (m *LastChainHeight) String() string { return proto.CompactTextString(m) }
func (*LastChainHeight) ProtoMessage()    {}
func (*LastChainHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_b10f0e2a2ac9ce40, []int{0}
}
func (m *LastChainHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastChainHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastChainHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastChainHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastChainHeight.Merge(m, src)
}
func (m *LastChainHeight) XXX_Size() int {
	return m.Size()
}
func (m *LastChainHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_LastChainHeight.DiscardUnknown(m)
}

var xxx_messageInfo_LastChainHeight proto.InternalMessageInfo

func (m *LastChainHeight) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *LastChainHeight) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Mimir struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Mimir) Reset()         { *m = Mimir{} }
func (m *Mimir) String() string { return proto.CompactTextString(m) }
func (*Mimir) ProtoMessage()    {}
func (*Mimir) Descriptor() ([]byte, []int) {
	return fileDescriptor_b10f0e2a2ac9ce40, []int{1}
}
func (m *Mimir) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mimir) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mimir.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mimir) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mimir.Merge(m, src)
}
func (m *Mimir) XXX_Size() int {
	return m.Size()
}
func (m *Mimir) XXX_DiscardUnknown() {
	xxx_messageInfo_Mimir.DiscardUnknown(m)
}

var xxx_messageInfo_Mimir proto.InternalMessageInfo

func (m *Mimir) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Mimir) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GenesisState struct {
	Pools               []types.Pool                                                        `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
	LiquidityProviders  gitlab_com_thorchain_thornode_x_thorchain_types.LiquidityProviders  `protobuf:"bytes,2,rep,name=liquidity_providers,json=liquidityProviders,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.LiquidityProviders" json:"liquidity_providers"`
	ObservedTxInVoters  gitlab_com_thorchain_thornode_x_thorchain_types.ObservedTxVoters    `protobuf:"bytes,3,rep,name=observed_tx_in_voters,json=observedTxInVoters,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.ObservedTxVoters" json:"observed_tx_in_voters"`
	ObservedTxOutVoters gitlab_com_thorchain_thornode_x_thorchain_types.ObservedTxVoters    `protobuf:"bytes,4,rep,name=observed_tx_out_voters,json=observedTxOutVoters,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.ObservedTxVoters" json:"observed_tx_out_voters"`
	TxOuts              []types.TxOut                                                       `protobuf:"bytes,5,rep,name=tx_outs,json=txOuts,proto3" json:"tx_outs"`
	NodeAccounts        gitlab_com_thorchain_thornode_x_thorchain_types.NodeAccounts        `protobuf:"bytes,6,rep,name=node_accounts,json=nodeAccounts,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.NodeAccounts" json:"node_accounts"`
	Vaults              gitlab_com_thorchain_thornode_x_thorchain_types.Vaults              `protobuf:"bytes,7,rep,name=vaults,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.Vaults" json:"vaults"`
	Reserve             uint64                                                              `protobuf:"varint,8,opt,name=reserve,proto3" json:"reserve,omitempty"`
	LastSignedHeight    int64                                                               `protobuf:"varint,10,opt,name=last_signed_height,json=lastSignedHeight,proto3" json:"last_signed_height,omitempty"`
	LastChainHeights    []LastChainHeight                                                   `protobuf:"bytes,11,rep,name=last_chain_heights,json=lastChainHeights,proto3" json:"last_chain_heights"`
	ReserveContributors gitlab_com_thorchain_thornode_x_thorchain_types.ReserveContributors `protobuf:"bytes,12,rep,name=reserve_contributors,json=reserveContributors,proto3,castrepeated=gitlab.com/thorchain/thornode/x/thorchain/types.ReserveContributors" json:"reserve_contributors"`
	Network             types.Network                                                       `protobuf:"bytes,13,opt,name=network,proto3" json:"network"`
	OrderbookItems      []types.MsgSwap                                                     `protobuf:"bytes,19,rep,name=orderbook_items,json=orderbookItems,proto3" json:"orderbook_items"`
	NetworkFees         []types.NetworkFee                                                  `protobuf:"bytes,20,rep,name=network_fees,json=networkFees,proto3" json:"network_fees"`
	ChainContracts      []types.ChainContract                                               `protobuf:"bytes,22,rep,name=chain_contracts,json=chainContracts,proto3" json:"chain_contracts"`
	THORNames           []types.THORName                                                    `protobuf:"bytes,23,rep,name=THORNames,proto3" json:"THORNames"`
	Mimirs              []Mimir                                                             `protobuf:"bytes,24,rep,name=mimirs,proto3" json:"mimirs"`
	StoreVersion        int64                                                               `protobuf:"varint,25,opt,name=store_version,json=storeVersion,proto3" json:"store_version,omitempty"`
	BondProviders       []types.BondProviders                                               `protobuf:"bytes,26,rep,name=bond_providers,json=bondProviders,proto3" json:"bond_providers"`
	POL                 types.ProtocolOwnedLiquidity                                        `protobuf:"bytes,27,opt,name=POL,proto3" json:"POL"`
	Loans               []types.Loan                                                        `protobuf:"bytes,28,rep,name=loans,proto3" json:"loans"`
	StreamingSwaps      []types.StreamingSwap                                               `protobuf:"bytes,29,rep,name=streaming_swaps,json=streamingSwaps,proto3" json:"streaming_swaps"`
	SwapQueueItems      []types.MsgSwap                                                     `protobuf:"bytes,30,rep,name=swap_queue_items,json=swapQueueItems,proto3" json:"swap_queue_items"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b10f0e2a2ac9ce40, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetPools() []types.Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *GenesisState) GetLiquidityProviders() gitlab_com_thorchain_thornode_x_thorchain_types.LiquidityProviders {
	if m != nil {
		return m.LiquidityProviders
	}
	return nil
}

func (m *GenesisState) GetObservedTxInVoters() gitlab_com_thorchain_thornode_x_thorchain_types.ObservedTxVoters {
	if m != nil {
		return m.ObservedTxInVoters
	}
	return nil
}

func (m *GenesisState) GetObservedTxOutVoters() gitlab_com_thorchain_thornode_x_thorchain_types.ObservedTxVoters {
	if m != nil {
		return m.ObservedTxOutVoters
	}
	return nil
}

func (m *GenesisState) GetTxOuts() []types.TxOut {
	if m != nil {
		return m.TxOuts
	}
	return nil
}

func (m *GenesisState) GetNodeAccounts() gitlab_com_thorchain_thornode_x_thorchain_types.NodeAccounts {
	if m != nil {
		return m.NodeAccounts
	}
	return nil
}

func (m *GenesisState) GetVaults() gitlab_com_thorchain_thornode_x_thorchain_types.Vaults {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *GenesisState) GetReserve() uint64 {
	if m != nil {
		return m.Reserve
	}
	return 0
}

func (m *GenesisState) GetLastSignedHeight() int64 {
	if m != nil {
		return m.LastSignedHeight
	}
	return 0
}

func (m *GenesisState) GetLastChainHeights() []LastChainHeight {
	if m != nil {
		return m.LastChainHeights
	}
	return nil
}

func (m *GenesisState) GetReserveContributors() gitlab_com_thorchain_thornode_x_thorchain_types.ReserveContributors {
	if m != nil {
		return m.ReserveContributors
	}
	return nil
}

func (m *GenesisState) GetNetwork() types.Network {
	if m != nil {
		return m.Network
	}
	return types.Network{}
}

func (m *GenesisState) GetOrderbookItems() []types.MsgSwap {
	if m != nil {
		return m.OrderbookItems
	}
	return nil
}

func (m *GenesisState) GetNetworkFees() []types.NetworkFee {
	if m != nil {
		return m.NetworkFees
	}
	return nil
}

func (m *GenesisState) GetChainContracts() []types.ChainContract {
	if m != nil {
		return m.ChainContracts
	}
	return nil
}

func (m *GenesisState) GetTHORNames() []types.THORName {
	if m != nil {
		return m.THORNames
	}
	return nil
}

func (m *GenesisState) GetMimirs() []Mimir {
	if m != nil {
		return m.Mimirs
	}
	return nil
}

func (m *GenesisState) GetStoreVersion() int64 {
	if m != nil {
		return m.StoreVersion
	}
	return 0
}

func (m *GenesisState) GetBondProviders() []types.BondProviders {
	if m != nil {
		return m.BondProviders
	}
	return nil
}

func (m *GenesisState) GetPOL() types.ProtocolOwnedLiquidity {
	if m != nil {
		return m.POL
	}
	return types.ProtocolOwnedLiquidity{}
}

func (m *GenesisState) GetLoans() []types.Loan {
	if m != nil {
		return m.Loans
	}
	return nil
}

func (m *GenesisState) GetStreamingSwaps() []types.StreamingSwap {
	if m != nil {
		return m.StreamingSwaps
	}
	return nil
}

func (m *GenesisState) GetSwapQueueItems() []types.MsgSwap {
	if m != nil {
		return m.SwapQueueItems
	}
	return nil
}

func init() {
	proto.RegisterType((*LastChainHeight)(nil), "thorchain.lastChainHeight")
	proto.RegisterType((*Mimir)(nil), "thorchain.mimir")
	proto.RegisterType((*GenesisState)(nil), "thorchain.GenesisState")
}

func init() {
	proto.RegisterFile("thorchain/v1/x/thorchain/genesis.proto", fileDescriptor_b10f0e2a2ac9ce40)
}

var fileDescriptor_b10f0e2a2ac9ce40 = []byte{
	// 1021 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0x8f, 0x6a, 0xc5, 0x71, 0xd6, 0x8e, 0xad, 0xac, 0x5d, 0xb3, 0x0d, 0xd4, 0xf5, 0x84, 0x19,
	0x30, 0x03, 0xd8, 0x34, 0x9d, 0x76, 0x18, 0xa6, 0x2d, 0x54, 0x66, 0x20, 0x35, 0x21, 0x0e, 0x4a,
	0x27, 0x07, 0x2e, 0x1a, 0xd9, 0x5a, 0x6c, 0x4d, 0x64, 0xad, 0xab, 0x5d, 0x39, 0xc9, 0x81, 0xcf,
	0x00, 0x33, 0x0c, 0x07, 0xbe, 0x02, 0x9f, 0xa4, 0xc7, 0x1e, 0x39, 0x01, 0x93, 0x7c, 0x11, 0x66,
	0x57, 0x4f, 0x8e, 0x1c, 0xf3, 0x47, 0xbe, 0x70, 0xf1, 0x68, 0xdf, 0xfb, 0xfd, 0x9e, 0x7e, 0xfb,
	0xf4, 0xfe, 0x18, 0xbd, 0x23, 0xc6, 0x2c, 0x1c, 0x8e, 0x1d, 0x2f, 0xe8, 0xcc, 0xee, 0x77, 0xce,
	0x3b, 0xd7, 0xc7, 0x11, 0x0d, 0x28, 0xf7, 0x78, 0x7b, 0x1a, 0x32, 0xc1, 0xf0, 0xe6, 0xdc, 0xb1,
	0xd3, 0xfe, 0x47, 0x8a, 0xb8, 0x98, 0x52, 0xae, 0x7e, 0xed, 0x29, 0x63, 0x7e, 0x4c, 0xdd, 0xf9,
	0x38, 0x0b, 0x5e, 0x19, 0xec, 0x21, 0x0b, 0x44, 0xe8, 0x0c, 0x05, 0x30, 0x1f, 0x66, 0x61, 0x06,
	0x54, 0x9c, 0xb1, 0xf0, 0xd4, 0xfe, 0x8e, 0x52, 0xa0, 0x7d, 0xf8, 0x1f, 0xb4, 0x09, 0x1f, 0xd9,
	0xfc, 0xcc, 0x99, 0xae, 0xa2, 0x8f, 0x8b, 0x90, 0x3a, 0x13, 0x2f, 0x58, 0x60, 0xde, 0x5f, 0x41,
	0x5f, 0x46, 0x6d, 0x90, 0xbc, 0x24, 0x77, 0x4f, 0xb2, 0xc0, 0x43, 0xca, 0x69, 0x38, 0xa3, 0x71,
	0xf6, 0xbc, 0x41, 0x24, 0x58, 0x08, 0xf4, 0x4e, 0x16, 0xfa, 0xcc, 0x89, 0xfc, 0x24, 0xe3, 0x1f,
	0x65, 0x21, 0x88, 0x73, 0x9b, 0x45, 0x09, 0xe3, 0x51, 0xa6, 0x1c, 0x30, 0x97, 0xda, 0xce, 0x70,
	0xc8, 0xa2, 0x60, 0xa5, 0x6f, 0xcb, 0x06, 0xea, 0x66, 0xae, 0x2d, 0xce, 0x81, 0xf6, 0x38, 0x0b,
	0xcd, 0xf7, 0x5e, 0x46, 0x9e, 0xeb, 0x89, 0x0b, 0x7b, 0x1a, 0xb2, 0x99, 0xe7, 0xd2, 0x24, 0x1f,
	0x7b, 0x99, 0xae, 0x37, 0x66, 0x61, 0xe0, 0x4c, 0x92, 0x6a, 0xca, 0x54, 0xee, 0x3e, 0x73, 0x02,
	0xc0, 0xd7, 0x46, 0x6c, 0xc4, 0xd4, 0x63, 0x47, 0x3e, 0xc5, 0xd6, 0xdd, 0x4f, 0x51, 0xc5, 0x77,
	0xb8, 0xe8, 0x4a, 0xe2, 0x3e, 0xf5, 0x46, 0x63, 0x81, 0x6b, 0x68, 0x5d, 0xc5, 0x21, 0x5a, 0x53,
	0x6b, 0x6d, 0x5a, 0xf1, 0x01, 0xd7, 0x51, 0x7e, 0xac, 0xfc, 0xe4, 0x56, 0x53, 0x6b, 0xe5, 0x2c,
	0x38, 0xed, 0x76, 0xd0, 0xfa, 0xc4, 0x9b, 0x78, 0x21, 0x36, 0x50, 0xee, 0x94, 0x5e, 0x00, 0x49,
	0x3e, 0xca, 0x40, 0x33, 0xc7, 0x8f, 0x28, 0x30, 0xe2, 0xc3, 0xee, 0x0f, 0x65, 0x54, 0xfa, 0x32,
	0xee, 0xe1, 0x63, 0xe1, 0x08, 0x8a, 0xdf, 0x45, 0xeb, 0xb2, 0x2b, 0x39, 0xd1, 0x9a, 0xb9, 0x56,
	0x71, 0xaf, 0xd8, 0x56, 0xfa, 0xdb, 0x47, 0x8c, 0xf9, 0xa6, 0xfe, 0xea, 0xf7, 0x7b, 0x6b, 0x56,
	0xec, 0xc7, 0x3f, 0x6b, 0xa8, 0xba, 0x9c, 0x42, 0x4e, 0x6e, 0x29, 0x1e, 0x01, 0xde, 0x41, 0x82,
	0x38, 0x02, 0x80, 0xd9, 0x93, 0x41, 0x7e, 0xfd, 0xe3, 0x9e, 0x39, 0xf2, 0x84, 0xef, 0x0c, 0xda,
	0x43, 0x36, 0x49, 0x67, 0x4b, 0xa6, 0x95, 0xb9, 0x74, 0x39, 0x85, 0xcb, 0xa1, 0xb8, 0x85, 0xfd,
	0x25, 0x1b, 0xfe, 0x49, 0x43, 0xb7, 0x53, 0x15, 0x61, 0x7b, 0x81, 0x3d, 0x63, 0x42, 0x2a, 0xcb,
	0x29, 0x65, 0x75, 0x50, 0xd6, 0x07, 0xcc, 0x8b, 0xf3, 0x13, 0xe9, 0x36, 0xf7, 0x41, 0xd7, 0x67,
	0xab, 0xea, 0xba, 0x11, 0x88, 0x5b, 0x98, 0xcd, 0x2d, 0xcf, 0x83, 0xd8, 0x26, 0xb3, 0x55, 0x4f,
	0xab, 0x62, 0x91, 0x48, 0x64, 0xe9, 0xff, 0x93, 0xac, 0xea, 0xb5, 0xac, 0x7e, 0x24, 0x40, 0xd7,
	0xfb, 0x68, 0x23, 0x56, 0xc3, 0xc9, 0xba, 0xd2, 0x51, 0x02, 0x1d, 0x0a, 0x04, 0x5f, 0x3c, 0x2f,
	0xe4, 0x81, 0xe3, 0xef, 0xd1, 0x56, 0xba, 0x47, 0x39, 0xc9, 0x2b, 0x0a, 0x06, 0xca, 0x21, 0x73,
	0xe9, 0xb3, 0xd8, 0x65, 0x7e, 0x0e, 0xb2, 0x1f, 0xaf, 0x2a, 0x3b, 0x15, 0x84, 0x5b, 0xa5, 0x20,
	0x75, 0xc2, 0x2e, 0xca, 0xab, 0x29, 0xc4, 0xc9, 0xc6, 0x82, 0xd4, 0x13, 0x69, 0x34, 0x9f, 0xc2,
	0x1b, 0x1f, 0xad, 0xfa, 0x46, 0x45, 0xe7, 0x16, 0xc4, 0xc6, 0x04, 0x6d, 0xc0, 0xa8, 0x24, 0x85,
	0xa6, 0xd6, 0xd2, 0xad, 0xe4, 0x88, 0x3f, 0x40, 0x58, 0x76, 0xa7, 0xcd, 0xbd, 0x51, 0x40, 0x5d,
	0x1b, 0x1a, 0x10, 0xa9, 0x76, 0x32, 0xa4, 0xe7, 0x58, 0x39, 0xa0, 0x71, 0x0f, 0x01, 0x1d, 0xef,
	0xac, 0x18, 0xcc, 0x49, 0x51, 0x29, 0x4f, 0x8d, 0x8b, 0xf6, 0x8d, 0x86, 0x87, 0x94, 0x1b, 0x37,
	0xcc, 0x1c, 0xff, 0xa2, 0xa1, 0xda, 0xdf, 0xcc, 0x70, 0x4e, 0x4a, 0x2a, 0xe4, 0x1d, 0x48, 0x86,
	0x15, 0x43, 0xba, 0xd7, 0x08, 0xf3, 0x2b, 0xc8, 0x4c, 0x77, 0xd5, 0xcc, 0x2c, 0xc7, 0xe2, 0x56,
	0x35, 0x5c, 0x36, 0xe2, 0x36, 0xda, 0x80, 0x05, 0x46, 0xb6, 0x9a, 0x5a, 0xab, 0xb8, 0x57, 0x4e,
	0x4a, 0x22, 0xb6, 0xc2, 0xa5, 0x12, 0x10, 0x7e, 0x82, 0x2a, 0x2c, 0x74, 0x69, 0x38, 0x60, 0xec,
	0xd4, 0xf6, 0x04, 0x9d, 0x70, 0x52, 0x55, 0xb7, 0x48, 0x78, 0x5f, 0xf3, 0xd1, 0xf1, 0x99, 0x33,
	0x05, 0x5e, 0x79, 0x0e, 0x7e, 0x2e, 0xb1, 0xf8, 0x13, 0x54, 0x4a, 0xed, 0x73, 0x4e, 0x6a, 0x8a,
	0xbb, 0xbd, 0xf8, 0xce, 0x2f, 0x28, 0x05, 0x7a, 0x31, 0x98, 0x5b, 0x38, 0xee, 0xa2, 0xca, 0xe2,
	0xbf, 0x08, 0x4e, 0xea, 0x8a, 0x5e, 0x03, 0xba, 0x4a, 0x7a, 0x17, 0x9c, 0x89, 0x80, 0x61, 0xda,
	0xc8, 0xf1, 0x03, 0xb4, 0xf9, 0x62, 0xbf, 0x6f, 0x1d, 0x3a, 0x13, 0xca, 0xc9, 0x1b, 0x8a, 0x5e,
	0x49, 0xfa, 0x06, 0xec, 0xc0, 0xbc, 0xc6, 0xe1, 0x36, 0xca, 0xab, 0xd9, 0xcc, 0x09, 0x51, 0x0c,
	0x23, 0x55, 0x04, 0xca, 0x91, 0x74, 0x5b, 0x8c, 0xc2, 0x6f, 0xa3, 0x2d, 0x2e, 0x58, 0x48, 0xed,
	0x19, 0x0d, 0xb9, 0xc7, 0x02, 0x72, 0x47, 0x55, 0x5a, 0x49, 0x19, 0x4f, 0x62, 0x1b, 0x7e, 0x86,
	0xca, 0x03, 0x16, 0xb8, 0xa9, 0xf9, 0xbb, 0xb3, 0x70, 0x1b, 0x93, 0x05, 0xee, 0x7c, 0x36, 0xc2,
	0x0b, 0xb6, 0x06, 0x69, 0x23, 0x7e, 0x88, 0x72, 0x47, 0xfd, 0x03, 0xf2, 0xa6, 0xfa, 0x70, 0x77,
	0x93, 0x79, 0x2f, 0xf7, 0xd1, 0x90, 0xf9, 0xfd, 0xb3, 0x80, 0xba, 0xf3, 0xc9, 0x0b, 0x01, 0x24,
	0x5e, 0x2e, 0x0a, 0xb9, 0xcf, 0x38, 0x79, 0x6b, 0x61, 0x51, 0x1c, 0x30, 0x27, 0x48, 0x16, 0x85,
	0xf2, 0xcb, 0x8c, 0x2f, 0xfe, 0x2f, 0xe2, 0xe4, 0xee, 0x82, 0xc6, 0xe3, 0xc4, 0x9b, 0xfe, 0xe4,
	0x3c, 0x6d, 0xe4, 0xf8, 0x29, 0x32, 0x24, 0xd5, 0x7e, 0x19, 0xd1, 0x88, 0x42, 0xc9, 0x34, 0xfe,
	0xad, 0x64, 0x24, 0xfa, 0x1b, 0x09, 0x56, 0x25, 0xd3, 0xd3, 0x0b, 0x9b, 0x06, 0xea, 0xe9, 0x85,
	0xb2, 0x51, 0xe9, 0xe9, 0x85, 0x8a, 0x61, 0xf4, 0xf4, 0x82, 0x61, 0x6c, 0xf7, 0xf4, 0xc2, 0xb6,
	0x81, 0x7b, 0x7a, 0x01, 0x1b, 0xd5, 0x9e, 0x5e, 0xb8, 0x6d, 0xd4, 0xcd, 0xee, 0xab, 0xcb, 0x86,
	0xf6, 0xfa, 0xb2, 0xa1, 0xfd, 0x79, 0xd9, 0xd0, 0x7e, 0xbc, 0x6a, 0xac, 0xbd, 0xbe, 0x6a, 0xac,
	0xfd, 0x76, 0xd5, 0x58, 0xfb, 0xf6, 0xbd, 0xcc, 0xfd, 0x33, 0xc8, 0xab, 0x7d, 0xfe, 0xe0, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xc9, 0x28, 0x32, 0x39, 0x0b, 0x00, 0x00,
}

func (m *LastChainHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastChainHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastChainHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Mimir) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mimir) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mimir) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapQueueItems) > 0 {
		for iNdEx := len(m.SwapQueueItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapQueueItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.StreamingSwaps) > 0 {
		for iNdEx := len(m.StreamingSwaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StreamingSwaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.Loans) > 0 {
		for iNdEx := len(m.Loans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Loans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
	}
	{
		size, err := m.POL.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xda
	if len(m.BondProviders) > 0 {
		for iNdEx := len(m.BondProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BondProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd2
		}
	}
	if m.StoreVersion != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.StoreVersion))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.Mimirs) > 0 {
		for iNdEx := len(m.Mimirs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mimirs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.THORNames) > 0 {
		for iNdEx := len(m.THORNames) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.THORNames[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.ChainContracts) > 0 {
		for iNdEx := len(m.ChainContracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainContracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.NetworkFees) > 0 {
		for iNdEx := len(m.NetworkFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.OrderbookItems) > 0 {
		for iNdEx := len(m.OrderbookItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderbookItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	{
		size, err := m.Network.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if len(m.ReserveContributors) > 0 {
		for iNdEx := len(m.ReserveContributors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReserveContributors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.LastChainHeights) > 0 {
		for iNdEx := len(m.LastChainHeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastChainHeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.LastSignedHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSignedHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.Reserve != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Reserve))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NodeAccounts) > 0 {
		for iNdEx := len(m.NodeAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TxOuts) > 0 {
		for iNdEx := len(m.TxOuts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxOuts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ObservedTxOutVoters) > 0 {
		for iNdEx := len(m.ObservedTxOutVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObservedTxOutVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ObservedTxInVoters) > 0 {
		for iNdEx := len(m.ObservedTxInVoters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ObservedTxInVoters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LiquidityProviders) > 0 {
		for iNdEx := len(m.LiquidityProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LastChainHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovGenesis(uint64(m.Height))
	}
	return n
}

func (m *Mimir) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovGenesis(uint64(m.Value))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LiquidityProviders) > 0 {
		for _, e := range m.LiquidityProviders {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ObservedTxInVoters) > 0 {
		for _, e := range m.ObservedTxInVoters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ObservedTxOutVoters) > 0 {
		for _, e := range m.ObservedTxOutVoters {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TxOuts) > 0 {
		for _, e := range m.TxOuts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NodeAccounts) > 0 {
		for _, e := range m.NodeAccounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.Reserve != 0 {
		n += 1 + sovGenesis(uint64(m.Reserve))
	}
	if m.LastSignedHeight != 0 {
		n += 1 + sovGenesis(uint64(m.LastSignedHeight))
	}
	if len(m.LastChainHeights) > 0 {
		for _, e := range m.LastChainHeights {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ReserveContributors) > 0 {
		for _, e := range m.ReserveContributors {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.Network.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.OrderbookItems) > 0 {
		for _, e := range m.OrderbookItems {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.NetworkFees) > 0 {
		for _, e := range m.NetworkFees {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ChainContracts) > 0 {
		for _, e := range m.ChainContracts {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.THORNames) > 0 {
		for _, e := range m.THORNames {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Mimirs) > 0 {
		for _, e := range m.Mimirs {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if m.StoreVersion != 0 {
		n += 2 + sovGenesis(uint64(m.StoreVersion))
	}
	if len(m.BondProviders) > 0 {
		for _, e := range m.BondProviders {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	l = m.POL.Size()
	n += 2 + l + sovGenesis(uint64(l))
	if len(m.Loans) > 0 {
		for _, e := range m.Loans {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StreamingSwaps) > 0 {
		for _, e := range m.StreamingSwaps {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SwapQueueItems) > 0 {
		for _, e := range m.SwapQueueItems {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LastChainHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: lastChainHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: lastChainHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mimir) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: mimir: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: mimir: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, types.Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProviders = append(m.LiquidityProviders, types.LiquidityProvider{})
			if err := m.LiquidityProviders[len(m.LiquidityProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedTxInVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedTxInVoters = append(m.ObservedTxInVoters, types.ObservedTxVoter{})
			if err := m.ObservedTxInVoters[len(m.ObservedTxInVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedTxOutVoters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedTxOutVoters = append(m.ObservedTxOutVoters, types.ObservedTxVoter{})
			if err := m.ObservedTxOutVoters[len(m.ObservedTxOutVoters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOuts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOuts = append(m.TxOuts, types.TxOut{})
			if err := m.TxOuts[len(m.TxOuts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAccounts = append(m.NodeAccounts, types.NodeAccount{})
			if err := m.NodeAccounts[len(m.NodeAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, types.Vault{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			m.Reserve = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reserve |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSignedHeight", wireType)
			}
			m.LastSignedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSignedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChainHeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastChainHeights = append(m.LastChainHeights, LastChainHeight{})
			if err := m.LastChainHeights[len(m.LastChainHeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveContributors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveContributors = append(m.ReserveContributors, types.ReserveContributor{})
			if err := m.ReserveContributors[len(m.ReserveContributors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Network.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderbookItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderbookItems = append(m.OrderbookItems, types.MsgSwap{})
			if err := m.OrderbookItems[len(m.OrderbookItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkFees = append(m.NetworkFees, types.NetworkFee{})
			if err := m.NetworkFees[len(m.NetworkFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainContracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainContracts = append(m.ChainContracts, types.ChainContract{})
			if err := m.ChainContracts[len(m.ChainContracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field THORNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.THORNames = append(m.THORNames, types.THORName{})
			if err := m.THORNames[len(m.THORNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mimirs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mimirs = append(m.Mimirs, Mimir{})
			if err := m.Mimirs[len(m.Mimirs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreVersion", wireType)
			}
			m.StoreVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondProviders = append(m.BondProviders, types.BondProviders{})
			if err := m.BondProviders[len(m.BondProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field POL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.POL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loans = append(m.Loans, types.Loan{})
			if err := m.Loans[len(m.Loans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamingSwaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamingSwaps = append(m.StreamingSwaps, types.StreamingSwap{})
			if err := m.StreamingSwaps[len(m.StreamingSwaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapQueueItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapQueueItems = append(m.SwapQueueItems, types.MsgSwap{})
			if err := m.SwapQueueItems[len(m.SwapQueueItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
