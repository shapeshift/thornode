image: golang:1.17.0

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

cache:
  paths:
    - .cache

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  SAST_EXCLUDED_ANALYZERS: "eslint,bandit,semgrep"
  SAST_EXCLUDED_PATHS: "spec, test, tests, tmp,.cache"

before_script:
  - mkdir -p .cache
  - export GOPATH="$CI_PROJECT_DIR/.cache"

stages:
  - test
  - build
  - smoke-test

unit-tests:
  stage: test
  cache: {}
  tags:
    - thorchain
  except:
    - schedules
  coverage: '/total:\s+\(statements\)\s+(\d+.\d+\%)/'
  before_script:
    - apt update
    - apt install -y protobuf-compiler
    - make protob
  script:
    - make test-coverage
    - go tool cover -func=coverage.out
    - go tool cover -html=coverage.out -o coverage.html

lint:
  cache: []
  stage: test
  tags:
    - thorchain
  except:
    - schedules
    - testnet
    - chaosnet
    - mainnet
    - stagenet
    - testnet-multichain
    - chaosnet-multichain
  before_script:
    - apt-get update && apt-get install -y curl git jq make protobuf-compiler sudo xz-utils
    - go install mvdan.cc/gofumpt@v0.3.0
    # trunk.io setup
    - git fetch origin develop
    - curl https://get.trunk.io -fsSLo /tmp/trunk-install
    - chmod +x /tmp/trunk-install
    - /tmp/trunk-install -y
    - trunk check download
  script:
    - make lint

build-thornode:
  stage: build
  image: docker:20.10.12
  tags:
    - thorchain
  only:
    - master # build mocknet image
    - develop # build mocknet image multichain
    - testnet
    - chaosnet
    - mainnet
    - stagenet
    - testnet-multichain
    - chaosnet-multichain
  services:
    - docker:20.10.12-dind
  before_script:
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27384#note_497228752
    - |
      for i in $(seq 1 30)
      do
          docker info && break
          echo "Waiting for docker to start"
          sleep 1s
      done
    - apk -U add make git jq curl protoc
    - make docker-gitlab-login
  script:
    - make docker-gitlab-build
    - make docker-gitlab-push

smoke-test:
  stage: smoke-test
  cache: {}
  image: docker/compose:alpine-1.29.2
  tags:
    - thorchain
  services:
    - docker:20.10.12-dind
  artifacts:
    when: on_failure
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - ./logs/
  except:
    - schedules
  environment:
    name: integration
  variables:
    HEIMDALL_REPO: https://gitlab.com/thorchain/heimdall.git
    HEIMDALL_IMAGE: registry.gitlab.com/thorchain/heimdall:develop
    MIDGARD_REPO: https://gitlab.com/thorchain/midgard.git
    MIDGARD_IMAGE: registry.gitlab.com/thorchain/midgard:develop
    THOR_BLOCK_TIME: 0.8s
    BLOCK_TIME: 0.8s
    BLOCK_SCANNER_BACKOFF: 0.8s
    ETH_BLOCK_TIME: "0"
  before_script:
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27384#note_497228752
    - |
      for i in $(seq 1 30)
      do
          docker info && break
          echo "Waiting for docker to start"
          sleep 1s
      done
    - apk -U add git make protoc
    - (git clone --single-branch -b $CI_COMMIT_REF_NAME $HEIMDALL_REPO && cd ./heimdall && IMAGE_NAME=$HEIMDALL_IMAGE make build && cd ..) || (git clone --single-branch -b develop $HEIMDALL_REPO && docker pull $HEIMDALL_IMAGE)
    - (git clone --single-branch -b $CI_COMMIT_REF_NAME $MIDGARD_REPO && cd ./midgard && IMAGE_NAME=$MIDGARD_IMAGE make build && cd ..) || (git clone --single-branch -b develop $MIDGARD_REPO && docker pull $MIDGARD_IMAGE)
    - docker-compose -f build/docker/docker-compose.yml --profile mocknet --profile midgard up -d
  script:
    - cd ./heimdall && IMAGE_NAME=$HEIMDALL_IMAGE make smoke
  after_script:
    - ./scripts/docker_logs.sh

gosec-sast:
  stage: test
  tags:
    - thorchain
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_ID

secret_detection:
  stage: test
  tags:
    - thorchain
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_ID

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

semgrep:
  stage: test
  image: returntocorp/semgrep-agent:v1
  script: semgrep-agent --gitlab-json > gl-sast-report.json || true
  variables:
    SEMGREP_RULES: >-
      https://semgrep.dev/s/heimdallthor:insecure-logging
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    reports:
      sast: gl-sast-report.json
